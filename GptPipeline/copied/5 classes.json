{
  "project_name": "flashcardapp",
  "java_kotlin_files": {
    "com.example.flashcardapp.data": {
      "Flashcard": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\data\\Flashcard.kt",
        "content": "package com.example.flashcardapp.data\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"flashcards\")\ndata class Flashcard(\n    @PrimaryKey(autoGenerate = true) var id: Int = 0,\n    var question: String = \"\",      // changes: update (remove ?) \n    var answer: String = \"\",        // changes: update\n    var easinessFactor: Double = 2.5, // changes: update\n    var repetition: Int = 0,        // changes: update\n    var interval: Int = 1,          // changes: update\n    var nextReview: Long = System.currentTimeMillis(), // changes: update\n    var searchTerm: String = \"\",    // changes: update\n    var userNote: String = \"\"       // changes: update\n) {\n    // Secondary constructor (unchanged)\n    constructor(question: String, answer: String) : this(\n        0, question, answer, 2.5, 0, 1, System.currentTimeMillis(), \"\", \"\"\n    )\n}\n"
      },
      "FlashcardDao": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\data\\FlashcardDao.kt",
        "content": "package com.example.flashcardapp.data\n\nimport androidx.room.*\n\n@Dao\ninterface FlashcardDao {\n\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    fun insertFlashcard(flashcard: Flashcard): Long\n\n    @Update\n    fun updateFlashcard(flashcard: Flashcard)\n\n    @Delete\n    fun deleteFlashcard(flashcard: Flashcard)\n\n    @Query(\"SELECT * FROM flashcards WHERE id = :id\")\n    fun getFlashcardById(id: Int): Flashcard?\n\n    @Query(\"SELECT * FROM flashcards ORDER BY nextReview ASC\")\n    fun getAllFlashcards(): List<Flashcard>\n\n    @Query(\"SELECT * FROM flashcards WHERE nextReview <= :currentTime ORDER BY nextReview DESC LIMIT 1\")\n    fun getNextDueFlashcard(currentTime: Long): Flashcard?\n\n    @Query(\"SELECT * FROM flashcards WHERE nextReview > :currentTime ORDER BY nextReview ASC\")\n    fun getFutureFlashcards(currentTime: Long): List<Flashcard>\n\n    @Query(\"SELECT * FROM flashcards WHERE nextReview <= :currentTime ORDER BY nextReview DESC\")\n    fun getPastFlashcards(currentTime: Long): List<Flashcard>\n\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertTopic(topic: Topic): Long\n\n    @Query(\"SELECT * FROM topics\")\n    fun getAllTopics(): List<Topic>\n\n    @Query(\"SELECT * FROM topics WHERE name = :topicName LIMIT 1\")\n    fun getTopicByName(topicName: String): Topic?\n\n    @Query(\"UPDATE topics SET selected = :isSelected WHERE id = :topicId\")\n    fun updateTopicSelection(topicId: Int, isSelected: Boolean)\n\n    @Insert(onConflict = OnConflictStrategy.IGNORE)\n    fun insertCrossRef(crossRef: FlashcardTopicCrossRef)\n\n    @Query(\"SELECT COUNT(*) FROM flashcards WHERE nextReview <= :currentTime\")\n    fun getPastCount(currentTime: Long): Int\n\n    @Query(\"SELECT COUNT(*) FROM flashcards WHERE nextReview > :currentTime\")\n    fun getFutureCount(currentTime: Long): Int\n}\n"
      },
      "FlashcardRoomDatabase": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\data\\FlashcardRoomDatabase.kt",
        "content": "package com.example.flashcardapp.data\n\nimport android.content.Context\nimport androidx.room.Database\nimport androidx.room.Room\nimport androidx.room.RoomDatabase\nimport androidx.room.migration.Migration\nimport androidx.sqlite.db.SupportSQLiteDatabase\n\n@Database(\n    entities = [Flashcard::class, Topic::class, FlashcardTopicCrossRef::class, ReviewHistory::class],\n    version = 13,\n    exportSchema = false\n)\nabstract class FlashcardRoomDatabase : RoomDatabase() {\n\n    abstract fun flashcardDao(): FlashcardDao\n\n    companion object {\n        @Volatile\n        private var INSTANCE: FlashcardRoomDatabase? = null\n\n        private val MIGRATION_12_13 = object : Migration(12, 13) {\n            override fun migrate(database: SupportSQLiteDatabase) {\n                // --- flashcards ---\n                database.execSQL(\n                    \"CREATE TABLE IF NOT EXISTS flashcards_new (\" +\n                            \"id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \" +\n                            \"question TEXT NOT NULL DEFAULT '', \" +\n                            \"answer TEXT NOT NULL DEFAULT '', \" +\n                            \"easinessFactor REAL NOT NULL DEFAULT 2.5, \" +\n                            \"repetition INTEGER NOT NULL DEFAULT 0, \" +\n                            \"interval INTEGER NOT NULL DEFAULT 1, \" +\n                            \"nextReview INTEGER NOT NULL DEFAULT (strftime('%s','now')*1000), \" +\n                            \"searchTerm TEXT NOT NULL DEFAULT '', \" +\n                            \"userNote TEXT NOT NULL DEFAULT '' \" +\n                            \");\"\n                )\n                database.execSQL(\n                    \"INSERT INTO flashcards_new (id, question, answer, easinessFactor, repetition, interval, nextReview, searchTerm, userNote) \" +\n                            \"SELECT id, COALESCE(question, ''), COALESCE(answer, ''), \" +\n                            \"COALESCE(easinessFactor, 2.5), COALESCE(repetition, 0), \" +\n                            \"COALESCE(interval, 1), \" +\n                            \"COALESCE(nextReview, strftime('%s','now')*1000), \" +\n                            \"COALESCE(searchTerm, ''), COALESCE(userNote, '') \" +\n                            \"FROM flashcards;\"\n                )\n                database.execSQL(\"DROP TABLE flashcards;\")\n                database.execSQL(\"ALTER TABLE flashcards_new RENAME TO flashcards;\")\n\n                // --- review_history ---\n                database.execSQL(\n                    \"CREATE TABLE IF NOT EXISTS review_history_new (\" +\n                            \"id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, \" +\n                            \"question_id INTEGER NOT NULL DEFAULT 0, \" +\n                            \"confidence_level INTEGER NOT NULL DEFAULT 0, \" +\n                            \"timestamp INTEGER NOT NULL DEFAULT (strftime('%s','now')*1000), \" +\n                            \"time_since_last_seen INTEGER NOT NULL DEFAULT 0, \" +\n                            \"interval INTEGER NOT NULL DEFAULT 0, \" +\n                            \"review_type TEXT NOT NULL DEFAULT '', \" +\n                            \"answer_duration INTEGER NOT NULL DEFAULT 0 \" +\n                            \");\"\n                )\n                database.execSQL(\n                    \"INSERT INTO review_history_new (id, question_id, confidence_level, timestamp, time_since_last_seen, interval, review_type, answer_duration) \" +\n                            \"SELECT id, COALESCE(question_id, 0), COALESCE(confidence_level, 0), \" +\n                            \"COALESCE(timestamp, strftime('%s','now')*1000), \" +\n                            \"COALESCE(time_since_last_seen, 0), COALESCE(interval, 0), \" +\n                            \"COALESCE(review_type, ''), COALESCE(answer_duration, 0) \" +\n                            \"FROM review_history;\"\n                )\n                database.execSQL(\"DROP TABLE review_history;\")\n                database.execSQL(\"ALTER TABLE review_history_new RENAME TO review_history;\")\n\n                // --- topics ---\n                database.execSQL(\n                    \"CREATE TABLE IF NOT EXISTS topics_new (\" +\n                            \"id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, \" +\n                            \"name TEXT NOT NULL DEFAULT '', \" +\n                            \"selected INTEGER NOT NULL DEFAULT 0 \" +\n                            \");\"\n                )\n                database.execSQL(\n                    \"INSERT INTO topics_new (id, name, selected) \" +\n                            \"SELECT id, COALESCE(name, ''), COALESCE(selected, 0) FROM topics;\"\n                )\n                database.execSQL(\"DROP TABLE topics;\")\n                database.execSQL(\"ALTER TABLE topics_new RENAME TO topics;\")\n\n                // --- flashcard_topic_cross_ref (rename columns or annotate entity) ---\n                // Option A: rename DB columns to match Kotlin property names\n                database.execSQL(\n                    \"CREATE TABLE IF NOT EXISTS flashcard_topic_cross_ref_new (\" +\n                            \"flashcardId INTEGER NOT NULL, \" +\n                            \"topicId INTEGER NOT NULL, \" +\n                            \"PRIMARY KEY(flashcardId, topicId) \" +\n                            \");\"\n                )\n                database.execSQL(\n                    \"INSERT INTO flashcard_topic_cross_ref_new (flashcardId, topicId) \" +\n                            \"SELECT COALESCE(flashcard_id, 0), COALESCE(topic_id, 0) FROM flashcard_topic_cross_ref;\"\n                )\n                database.execSQL(\"DROP TABLE flashcard_topic_cross_ref;\")\n                database.execSQL(\"ALTER TABLE flashcard_topic_cross_ref_new RENAME TO flashcard_topic_cross_ref;\")\n\n                // OR Option B: keep 'flashcard_id'/'topic_id' columns and use @ColumnInfo in FlashcardTopicCrossRef.\n            }\n        }\n\n        fun getDatabase(context: Context): FlashcardRoomDatabase {\n            return INSTANCE ?: synchronized(this) {\n                val instance = Room.databaseBuilder(\n                    context.applicationContext,\n                    FlashcardRoomDatabase::class.java,\n                    \"flashcards.db\"\n                )\n                    .addMigrations(MIGRATION_12_13)\n                    .build()\n                INSTANCE = instance\n                instance\n            }\n        }\n    }\n}\n"
      },
      "FlashcardTopicCrossRef": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\data\\FlashcardTopicCrossRef.kt",
        "content": "package com.example.flashcardapp.data\n\nimport androidx.room.Entity\n\n@Entity(tableName = \"flashcard_topic_cross_ref\", primaryKeys = [\"flashcardId\", \"topicId\"])\n data class FlashcardTopicCrossRef(\n    val flashcardId: Int,\n    val topicId: Int\n)\n"
      },
      "ReviewHistory": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\data\\ReviewHistory.kt",
        "content": "package com.example.flashcardapp.data\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"review_history\")\ndata class ReviewHistory(\n    @PrimaryKey(autoGenerate = true) var id: Int = 0,\n    var question_id: Int = 0,              // changes: update (remove ?)\n    var confidence_level: Int = 0,         // changes: update\n    var timestamp: Long = System.currentTimeMillis(), // changes: update\n    var time_since_last_seen: Long = 0,    // changes: update\n    var interval: Int = 0,                // changes: update\n    var review_type: String = \"\",         // changes: update\n    var answer_duration: Int = 0          // changes: update\n)\n"
      },
      "Topic": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\data\\Topic.kt",
        "content": "package com.example.flashcardapp.data\n\nimport androidx.room.Entity\nimport androidx.room.PrimaryKey\n\n@Entity(tableName = \"topics\")\ndata class Topic(\n    @PrimaryKey(autoGenerate = true) var id: Int = 0,\n    var name: String = \"\",\n    var selected: Boolean = false\n) {\n    // Secondary constructor to support usage like new Topic(topicName)\n    constructor(name: String) : this(0, name, false)\n}"
      }
    },
    "com.example.flashcardapp.main": {
      "AddFlashcardActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\AddFlashcardActivity.java",
        "content": "// File: AddFlashcardActivity.java\npackage com.example.flashcardapp.main;\n\nimport android.os.Bundle;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\n\nimport java.util.ArrayList;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class AddFlashcardActivity extends AppCompatActivity {\n\n    private EditText etQuestion, etAnswer;\n    private Button btnSave;\n    private FlashcardDAO flashcardDAO;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_add_flashcard);\n\n        etQuestion = findViewById(R.id.et_question);\n        etAnswer = findViewById(R.id.et_answer);\n        btnSave = findViewById(R.id.btn_save);\n\n        flashcardDAO = new FlashcardDAO(this);\n        flashcardDAO.open();\n\n        btnSave.setOnClickListener(v -> {\n            String question = etQuestion.getText().toString().trim();\n            String answer = etAnswer.getText().toString().trim();\n\n            if (!question.isEmpty() && !answer.isEmpty()) {\n                Flashcard flashcard = new Flashcard(\n                        0, question, answer, 2.5, 0, 1, System.currentTimeMillis(), \"\", \"\"\n                );\n                flashcardDAO.createFlashcard(flashcard);\n                Toast.makeText(this, \"Flashcard saved!\", Toast.LENGTH_SHORT).show();\n                finish();\n            } else {\n                Toast.makeText(this, \"Please enter both question and answer.\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    @Override\n    protected void onDestroy() {\n        flashcardDAO.close();\n        super.onDestroy();\n    }\n}\n"
      },
      "ChatGPTActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\ChatGPTActivity.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChatGPTActivity extends AppCompatActivity {\n\n    private EditText etPrompt, etTopic, etInformativeText;\n    private Button btnAccept, btnBack;\n    private RecyclerView rvGeneratedQuestions;\n\n    private boolean buildMode = true; // Set to true for using local JSON, false for real GPT requests\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_chat_gpt);\n\n        // Initialize views\n        etPrompt = findViewById(R.id.et_prompt);\n        etTopic = findViewById(R.id.et_topic);\n        etInformativeText = findViewById(R.id.et_informative_text);\n        btnAccept = findViewById(R.id.btn_accept);\n        btnBack = findViewById(R.id.btn_back);\n        rvGeneratedQuestions = findViewById(R.id.rv_questions);\n\n        rvGeneratedQuestions.setLayoutManager(new LinearLayoutManager(this));\n\n        // Set initial view state\n        btnBack.setVisibility(View.GONE);\n        btnAccept.setText(\"Submit\");\n        btnAccept.setOnClickListener(v -> handleSubmit());\n\n        // Back button returns to prompt entry\n        btnBack.setOnClickListener(v -> resetToPromptView());\n    }\n\n    private void handleSubmit() {\n        if (buildMode) {\n            String localJson = loadLocalJson();\n            if (localJson != null) {\n                displayResponse(localJson); // Use local JSON for display\n            } else {\n                Toast.makeText(this, \"Failed to load local JSON\", Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            handleRealSubmit(); // Call GPT in real mode\n        }\n    }\n\n    private void handleRealSubmit() {\n        String userInput = etPrompt.getText().toString().trim();\n        if (!userInput.isEmpty()) {\n            ChatGPTHelper.getContextForQuestion(userInput, this, new ChatGPTHelper.OnChatGPTResponse() {\n                @Override\n                public void onSuccess(String response) {\n                    displayResponse(response);\n                }\n\n                @Override\n                public void onFailure(String error) {\n                    runOnUiThread(() -> {\n                        etInformativeText.setText(\"Failed to connect to GPT: \" + error);\n                        Toast.makeText(ChatGPTActivity.this, \"Failed to connect to GPT\", Toast.LENGTH_SHORT).show();\n                    });\n                }\n            });\n            etPrompt.setVisibility(View.GONE);\n            btnAccept.setText(\"Accept\");\n            btnBack.setVisibility(View.VISIBLE);\n        } else {\n            Toast.makeText(this, \"Please enter a query\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private void displayResponse(String response) {\n        try {\n            JSONObject parsedContent = new JSONObject(response);\n\n            etTopic.setText(parsedContent.optString(\"title\", \"No title\"));\n            etInformativeText.setText(parsedContent.optString(\"informative_text\", \"No informative text\"));\n\n            JSONArray questionsArray = parsedContent.optJSONArray(\"questions\");\n            if (questionsArray != null) {\n                List<Flashcard> flashcards = new ArrayList<>();\n                for (int i = 0; i < questionsArray.length(); i++) {\n                    JSONObject questionObject = questionsArray.getJSONObject(i);\n                    Flashcard flashcard = new Flashcard();\n                    flashcard.setQuestion(questionObject.optString(\"question\"));\n                    flashcard.setAnswer(questionObject.optString(\"answer\"));\n                    flashcard.setSearchTerm(questionObject.optString(\"searchTerm\"));\n                    flashcard.setUserNote(questionObject.optString(\"userNote\"));\n\n                    flashcards.add(flashcard);\n                }\n\n                // Populate the RecyclerView\n                ChatGPTQuestionAdapter adapter = new ChatGPTQuestionAdapter(new ArrayList<>(), (flashcard, position) -> {\n                     Toast.makeText(this, \"Recreate clicked at position: \" + position, Toast.LENGTH_SHORT).show();\n                });\n                rvGeneratedQuestions.setLayoutManager(new LinearLayoutManager(this));\n                rvGeneratedQuestions.setAdapter(adapter);\n            }\n        } catch (Exception e) {\n            etInformativeText.setText(\"Error parsing response\");\n            Log.e(\"ChatGPTActivity\", \"Error parsing JSON response\", e);\n        }\n    }\n\n    private String loadLocalJson() {\n        StringBuilder jsonBuilder = new StringBuilder();\n        try (InputStream is = getResources().openRawResource(R.raw.sample_response);\n             BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                jsonBuilder.append(line);\n            }\n            return jsonBuilder.toString();\n        } catch (IOException e) {\n            Log.e(\"ChatGPTActivity\", \"Error loading JSON from raw resource\", e);\n            return null;\n        }\n    }\n\n    private void resetToPromptView() {\n        etPrompt.setVisibility(View.VISIBLE);\n        btnAccept.setText(\"Submit\");\n        btnBack.setVisibility(View.GONE);\n    }\n}\n"
      },
      "ChatGPTHelper": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\ChatGPTHelper.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.res.AssetManager;\nimport android.util.Log;\nimport okhttp3.*;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class ChatGPTHelper {\n\n    private static final String API_URL = \"https://api.openai.com/v1/chat/completions\";\n    private static String API_KEY;\n\n    private static void initializeApiKey(Context context) {\n        if (API_KEY == null) {\n            try {\n                AssetManager assetManager = context.getAssets();\n                InputStream inputStream = assetManager.open(\"config.properties\");\n                Properties properties = new Properties();\n                properties.load(inputStream);\n                API_KEY = properties.getProperty(\"API_KEY\");\n            } catch (IOException e) {\n                Log.e(\"ChatGPTHelper\", \"Error loading API key: \" + e.getMessage());\n            }\n        }\n    }\n\n    private static final OkHttpClient client = new OkHttpClient.Builder()\n            .connectTimeout(30, java.util.concurrent.TimeUnit.SECONDS)\n\n            .writeTimeout(30, java.util.concurrent.TimeUnit.SECONDS)\n            .readTimeout(30, java.util.concurrent.TimeUnit.SECONDS)\n            .build();\n\n    // Callback interfaces\n    public interface OnChatGPTResponse {\n        void onSuccess(String response);\n        void onFailure(String error);\n    }\n\n    // General ChatGPT Request Method\n    public static void makeChatGPTRequest(String prompt, OnChatGPTResponse callback, Context context) {\n\n        initializeApiKey(context);\n\n        try {\n            // Create JSON request body\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"model\", \"gpt-4-turbo\");\n\n            JSONArray messagesArray = new JSONArray();\n            JSONObject messageObject = new JSONObject();\n            messageObject.put(\"role\", \"user\");\n            messageObject.put(\"content\", prompt);\n            messagesArray.put(messageObject);\n\n            jsonObject.put(\"messages\", messagesArray);\n            String json = jsonObject.toString();\n\n            // Build request\n            RequestBody body = RequestBody.create(json, MediaType.get(\"application/json; charset=utf-8\"));\n            Request request = new Request.Builder()\n                    .url(API_URL)\n                    .header(\"Authorization\", \"Bearer \" + API_KEY)\n                    .post(body)\n                    .build();\n\n            // Send request asynchronously\n            client.newCall(request).enqueue(new Callback() {\n\n                @Override\n                public void onFailure(Call call, IOException e) {\n                    callback.onFailure(\"Failed to connect to GPT: \" + e.getMessage());\n                }\n\n                @Override\n                public void onResponse(Call call, Response response) throws IOException {\n                    if (response.isSuccessful()) {\n                        String responseBody = response.body().string();\n                        callback.onSuccess(responseBody);\n                    } else {\n                        callback.onFailure(\"Error: \" + response.code());\n                    }\n                    response.close();\n                }\n            });\n\n        } catch (Exception e) {\n            callback.onFailure(\"Error constructing JSON payload: \" + e.getMessage());\n        }\n    }\n\n    public static void generateMultipleQuestions(String prompt, Context context, OnChatGPTResponse callback) {\n\n        makeChatGPTRequest(prompt, new OnChatGPTResponse() {\n            @Override\n            public void onSuccess(String response) {\n                try {\n                    // Parse the response as an array of questions\n                    JSONArray jsonArray = new JSONArray(response);\n                    callback.onSuccess(jsonArray.toString());\n                } catch (Exception e) {\n                    callback.onFailure(\"Error parsing JSON response: \" + e.getMessage());\n                    Log.e(\"ChatGPTHelper\", \"Error parsing JSON response\", e);\n                }\n            }\n\n            @Override\n            public void onFailure(String error) {\n                callback.onFailure(error);\n            }\n        }, context);\n    }\n\n    // Specific method for getting context for a question\n    public static void getContextForQuestion(String question,Context context,  OnChatGPTResponse callback) {\n        String prompt = \"Explain why this was important, starting with the most significant reason. Write a 150-word answer with the most important reason in the first sentence, followed by a new line after that sentence. Important: Do NOT repeat details from the question or the answer! Include one additional relevant fact in the explanation.  \" + question;\n        makeChatGPTRequest(prompt, new OnChatGPTResponse() {\n            @Override\n            public void onSuccess(String response) {\n                try {\n                    // Log the response to confirm its structure\n                    Log.d(\"ChatGPT Response\", \"Full response: \" + response);\n\n                    // Parse the JSON response to get the \"content\" field directly\n                    JSONObject jsonResponse = new JSONObject(response);\n                    String content = jsonResponse\n                            .getJSONArray(\"choices\")\n                            .getJSONObject(0)\n                            .getJSONObject(\"message\")\n                            .getString(\"content\");\n\n                    // Display the content directly as the context\n                    callback.onSuccess(content);  // Pass the content back to the calling activity or component\n                } catch (Exception e) {\n                    callback.onFailure(\"Error parsing JSON response: \" + e.getMessage());\n                    Log.e(\"ChatGPTHelper\", \"Error parsing JSON response\", e);\n                }\n            }\n            @Override\n            public void onFailure(String error) {\n                callback.onFailure(error);\n            }\n        },context);\n    }\n\n\n\n\n    // Specific method for generating a related question\n    public static void generateRelatedQuestion(String question, OnChatGPTResponse callback, Context context) {\n        String prompt = \"Generate a related question for the following: \\\"\" + question + \"\\\". \" +\n                \"Provide the response in a JSON array with the following format: \" +\n                \"[{\\\"question\\\": \\\"<new question>\\\", \\\"answer\\\": \\\"<corresponding answer>\\\", \\\"searchTerm\\\": \\\"<related search term>\\\", \" +\n                \"\\\"userNote\\\": \\\"<a note about the question>\\\", \\\"topics\\\": [\\\"<topic1>\\\", \\\"<topic2>\\\"]}]. \" +\n                \"Ensure the JSON array contains only one question and is valid.\";\n        makeChatGPTRequest(prompt, new OnChatGPTResponse() {\n            @Override\n            public void onSuccess(String response) {\n                // Pass the response (generated question) to EditQuestionActivity\n                Intent intent = new Intent(context, EditFlashcardActivity.class);\n                intent.putExtra(\"generated_question\", response);  // Add response to intent\n                context.startActivity(intent);\n            }\n            @Override\n            public void onFailure(String error) {\n                callback.onFailure(error);\n            }\n        }, context);\n    }\n\n}\n"
      },
      "ChatGPTQuestionAdapter": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\ChatGPTQuestionAdapter.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ChatGPTQuestionAdapter extends RecyclerView.Adapter<ChatGPTQuestionAdapter.QuestionViewHolder> {\n\n    private final List<Flashcard> flashcards;\n    private final List<Boolean> selectionStates; // Tracks selection states for each flashcard\n    private OnRecreateClickListener recreateClickListener;\n\n    public ChatGPTQuestionAdapter(List<Flashcard> flashcards, OnRecreateClickListener recreateClickListener) {\n        this.flashcards = flashcards != null ? flashcards : new ArrayList<>();\n        this.selectionStates = new ArrayList<>();\n        for (int i = 0; i < this.flashcards.size(); i++) {\n            this.selectionStates.add(false); // Initialize all as unselected\n        }\n        this.recreateClickListener = recreateClickListener;\n    }\n\n    @NonNull\n    @Override\n    public QuestionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_generated_question, parent, false);\n        return new QuestionViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull QuestionViewHolder holder, int position) {\n        Flashcard flashcard = flashcards.get(position);\n\n        holder.etQuestion.setText(flashcard.getQuestion());\n        holder.etAnswer.setText(flashcard.getAnswer());\n\n        // Prevent triggering the listener during binding\n        holder.cbSelect.setOnCheckedChangeListener(null);\n\n        // Set the current checkbox state\n        holder.cbSelect.setChecked(selectionStates.get(position));\n\n        // Add a listener to update the selection state\n        holder.cbSelect.setOnCheckedChangeListener((buttonView, isChecked) -> {\n            selectionStates.set(position, isChecked); // Update selectionStates\n        });\n\n        // Optional: Add a listener for recreating a flashcard if needed\n        holder.itemView.setOnClickListener(v -> {\n            if (recreateClickListener != null) {\n                recreateClickListener.onRecreateClick(flashcard, position); // Pass both flashcard and position\n            }\n        });\n    }\n\n\n\n    @Override\n    public int getItemCount() {\n        return flashcards.size();\n    }\n\n    public interface OnRecreateClickListener {\n        void onRecreateClick(Flashcard flashcard, int position);\n    }\n\n    // Method to retrieve only the selected flashcards\n    public List<Flashcard> getSelectedQuestions() {\n        List<Flashcard> selectedQuestions = new ArrayList<>();\n        for (int i = 0; i < flashcards.size(); i++) {\n            if (selectionStates.get(i)) { // Check if the flashcard is selected\n                selectedQuestions.add(flashcards.get(i));\n            }\n        }\n        return selectedQuestions;\n    }\n\n    // Method to update the adapter's data\n    public void updateData(List<Flashcard> newFlashcards) {\n        flashcards.clear();\n        selectionStates.clear();\n        if (newFlashcards != null) {\n            flashcards.addAll(newFlashcards);\n            for (int i = 0; i < newFlashcards.size(); i++) {\n                selectionStates.add(false); // Reset selection states for new data\n            }\n        }\n        notifyDataSetChanged();\n    }\n\n    public static class QuestionViewHolder extends RecyclerView.ViewHolder {\n        EditText etQuestion, etAnswer;\n        CheckBox cbSelect;\n\n        public QuestionViewHolder(@NonNull View itemView) {\n            super(itemView);\n            etQuestion = itemView.findViewById(R.id.et_generated_question);\n            etAnswer = itemView.findViewById(R.id.et_generated_answer);\n            cbSelect = itemView.findViewById(R.id.cb_select_question);\n        }\n    }\n}\n"
      },
      "EditFlashcardActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\EditFlashcardActivity.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.content.ClipData;\nimport android.content.ClipboardManager;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\nimport com.example.flashcardapp.data.Topic;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class EditFlashcardActivity extends AppCompatActivity {\n\n    private EditText etQuestion, etAnswer, etSearchTerm, etUserNote, etTopics;\n    private Button btnUpdate, btnContext, btnRelatedQuestion, btnCopy, btnDelete;\n    private FlashcardDAO flashcardDAO;\n    private Flashcard flashcard;\n    private List<Topic> associatedTopics;\n\n    // Cache for topics\n    private Map<String, Topic> topicCache = new HashMap<>();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_edit_flashcard);\n\n        // Initialize views\n        etQuestion = findViewById(R.id.et_question);\n        etAnswer = findViewById(R.id.et_answer);\n        etSearchTerm = findViewById(R.id.et_search_term);\n        etUserNote = findViewById(R.id.et_user_note);\n        etTopics = findViewById(R.id.et_topics);\n        btnUpdate = findViewById(R.id.btn_update);\n        btnDelete = findViewById(R.id.btn_delete);\n        btnCopy = findViewById(R.id.btn_copy);\n        btnContext = findViewById(R.id.btn_context);\n        btnRelatedQuestion = findViewById(R.id.btn_generate_related_question);\n\n        // Initialize DAO\n        flashcardDAO = new FlashcardDAO(this);\n        flashcardDAO.open();\n\n        // Preload the topic cache with all existing topics from the database\n        preloadTopicCache();\n\n        // Retrieve flashcard ID from Intent and load flashcard details if ID is valid\n        int flashcardId = getIntent().getIntExtra(\"FLASHCARD_ID\", -1);\n        if (flashcardId != -1) {\n            flashcard = flashcardDAO.getFlashcard(flashcardId);\n            if (flashcard != null) {\n                populateFields(flashcard);\n            }\n        }\n\n        // Set up button listeners\n        setupButtonListeners();\n    }\n\n    private void populateFields(Flashcard flashcard) {\n        etQuestion.setText(flashcard.getQuestion());\n        etAnswer.setText(flashcard.getAnswer());\n        etSearchTerm.setText(flashcard.getSearchTerm());\n        etUserNote.setText(flashcard.getUserNote());\n\n        associatedTopics = flashcardDAO.getTopicsForFlashcard(flashcard.getId());\n        StringBuilder topicList = new StringBuilder();\n        for (Topic topic : associatedTopics) {\n            topicList.append(topic.getName()).append(\", \");\n        }\n        if (topicList.length() > 0) {\n            topicList.setLength(topicList.length() - 2);\n        }\n        etTopics.setText(topicList.toString());\n    }\n\n    private void setupButtonListeners() {\n        btnUpdate.setOnClickListener(v -> updateFlashcard());\n\n        btnCopy.setOnClickListener(v -> copyUserNoteToClipboard());\n\n        btnContext.setOnClickListener(v -> generateContextForQuestion());\n\n        btnRelatedQuestion.setOnClickListener(v -> generateRelatedQuestion());\n\n        btnDelete.setOnClickListener(v -> {\n            if (flashcard != null) {\n                flashcardDAO.deleteFlashcard(flashcard.getId()); // Call DAO method to delete\n                Toast.makeText(this, \"Flashcard deleted.\", Toast.LENGTH_SHORT).show();\n                finish(); // Close the activity and return to the previous screen\n            } else {\n                Toast.makeText(this, \"No flashcard to delete.\", Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    private void updateFlashcard() {\n        String question = etQuestion.getText().toString().trim();\n        String answer = etAnswer.getText().toString().trim();\n        String searchTerm = etSearchTerm.getText().toString().trim();\n        String userNote = etUserNote.getText().toString().trim();\n        String topics = etTopics.getText().toString().trim();\n\n        if (!question.isEmpty() && !answer.isEmpty()) {\n            flashcard.setQuestion(question);\n            flashcard.setAnswer(answer);\n            flashcard.setSearchTerm(searchTerm);\n            flashcard.setUserNote(userNote);\n            flashcardDAO.updateFlashcard(flashcard);\n\n            flashcardDAO.clearTopicsForFlashcard(flashcard.getId());\n            if (!topics.trim().isEmpty()) {\n                String[] topicArray = topics.split(\",\");\n                for (String topicName : topicArray) {\n                    topicName = topicName.trim();\n                    if (!topicName.isEmpty()) {\n                        Topic topic = getOrInsertTopicFromCache(topicName);\n                        flashcardDAO.associateFlashcardWithTopic(flashcard.getId(), topic.getId());\n                    }\n                }\n            }\n\n            Toast.makeText(this, \"Flashcard updated!\", Toast.LENGTH_SHORT).show();\n            setResult(RESULT_OK);\n            finish();\n        } else {\n            Toast.makeText(this, \"Please enter both question and answer.\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private void copyUserNoteToClipboard() {\n        String userNoteContent = etUserNote.getText().toString();\n        if (!userNoteContent.isEmpty()) {\n            ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);\n            ClipData clip = ClipData.newPlainText(\"User Note\", userNoteContent);\n            clipboard.setPrimaryClip(clip);\n            Toast.makeText(this, \"User Note copied to clipboard\", Toast.LENGTH_SHORT).show();\n        } else {\n            Toast.makeText(this, \"User Note is empty\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private void generateContextForQuestion() {\n        String question = \" \\\"\" + etQuestion.getText().toString().trim() + \"\\\" with answer: \\\"\" +\n                etAnswer.getText().toString().trim() + \"\\\" and additional info: \\\"\" +\n                etSearchTerm.getText().toString().trim() + \"\\\".\";\n\n        if (!question.isEmpty()) {\n            ChatGPTHelper.getContextForQuestion(question, this , new ChatGPTHelper.OnChatGPTResponse() {\n                @Override\n                public void onSuccess(String response) {\n                    runOnUiThread(() -> etUserNote.setText(response));\n                }\n\n                @Override\n                public void onFailure(String error) {\n                    Log.e(\"EditFlashcardActivity\", \"Failed to get context: \" + error);\n                    runOnUiThread(() -> Toast.makeText(EditFlashcardActivity.this, \"Failed to get context\", Toast.LENGTH_SHORT).show());\n                }\n            });\n        } else {\n            Toast.makeText(this, \"Please enter a question first\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private void generateRelatedQuestion() {\n        String question = etQuestion.getText().toString().trim();\n        if (!question.isEmpty()) {\n            ChatGPTHelper.generateRelatedQuestion(question, new ChatGPTHelper.OnChatGPTResponse() {\n                @Override\n                public void onSuccess(String response) {\n                    Intent intent = new Intent(EditFlashcardActivity.this, EditFlashcardActivity.class);\n                    intent.putExtra(\"relatedQuestion\", response);\n                    startActivity(intent);\n                }\n\n                @Override\n                public void onFailure(String error) {\n                    Log.e(\"EditFlashcardActivity\", \"Failed to generate related question: \" + error);\n                    runOnUiThread(() -> Toast.makeText(EditFlashcardActivity.this, \"Failed to generate related question\", Toast.LENGTH_SHORT).show());\n                }\n            }, EditFlashcardActivity.this);  // Add the context here\n        } else {\n            Toast.makeText(this, \"Please enter a question first\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n\n    private void preloadTopicCache() {\n        List<Topic> existingTopics = flashcardDAO.getAllTopics();\n        for (Topic topic : existingTopics) {\n            topicCache.put(topic.getName(), topic);\n        }\n    }\n\n    private Topic getOrInsertTopicFromCache(String topicName) {\n        if (topicCache.containsKey(topicName)) {\n            return topicCache.get(topicName);\n        }\n        Topic topic = flashcardDAO.getTopicByName(topicName);\n        if (topic == null) {\n            topic = flashcardDAO.insertTopic(topicName);\n        }\n        topicCache.put(topicName, topic);\n        return topic;\n    }\n\n    @Override\n    protected void onDestroy() {\n        flashcardDAO.close();\n        super.onDestroy();\n    }\n}\n"
      },
      "FlashcardAdapter": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\FlashcardAdapter.java",
        "content": "// File: FlashcardAdapter.java\npackage com.example.flashcardapp.main;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\n\nimport androidx.recyclerview.widget.RecyclerView;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nimport static com.example.flashcardapp.main.TimeUtils.formatTimeDifference;\n\npublic class FlashcardAdapter extends RecyclerView.Adapter<FlashcardAdapter.ViewHolder> {\n\n    private List<Flashcard> flashcards;\n    private Context context;\n\n    public FlashcardAdapter(Context context, List<Flashcard> flashcards) {\n        this.context = context;\n        // Sort flashcards by nextReview, with overdue ones first\n        Collections.sort(flashcards, new Comparator<Flashcard>() {\n            @Override\n            public int compare(Flashcard f1, Flashcard f2) {\n                return Long.compare(f1.getNextReview(), f2.getNextReview());\n            }\n        });\n        this.flashcards = flashcards;\n    }\n\n    public class ViewHolder extends RecyclerView.ViewHolder {\n        public TextView tvQuestion, tvAnswer, tvTimeDifference, tvInterval;\n\n        public ViewHolder(View itemView) {\n            super(itemView);\n            tvQuestion = itemView.findViewById(R.id.tv_question);\n            tvAnswer = itemView.findViewById(R.id.tv_answer);\n            tvTimeDifference = itemView.findViewById(R.id.tv_time_difference);\n            tvInterval = itemView.findViewById(R.id.tv_interval);\n\n            // Handle row click to open the edit/delete view\n            itemView.setOnClickListener(v -> {\n                int position = getAdapterPosition();\n                Flashcard flashcard = flashcards.get(position);\n                Intent intent = new Intent(context, EditFlashcardActivity.class);\n                intent.putExtra(\"FLASHCARD_ID\", flashcard.getId());\n                context.startActivity(intent);\n            });\n        }\n    }\n\n    @Override\n    public FlashcardAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(context).inflate(R.layout.item_flashcard, parent, false);\n        return new ViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(FlashcardAdapter.ViewHolder holder, int position) {\n        Flashcard flashcard = flashcards.get(position);\n        holder.tvQuestion.setText(flashcard.getQuestion());\n        holder.tvAnswer.setText(flashcard.getAnswer());\n\n        // Calculate time difference in seconds, minutes, and days\n        long currentTime = System.currentTimeMillis();\n        long nextReviewTime = flashcard.getNextReview();\n        long timeDifferenceMillis = nextReviewTime - currentTime;\n\n        long absTimeDifferenceMillis = Math.abs(timeDifferenceMillis);\n        String timeDifferenceText = formatTimeDifference(absTimeDifferenceMillis);\n\n        // Add a negative sign if the review is overdue\n        if (timeDifferenceMillis < 0) {\n            timeDifferenceText = \"-\" + timeDifferenceText;\n        }\n\n        long intervalValue = Math.abs(flashcard.getInterval()) * 1000L;  // Convert seconds to milliseconds\n\n        // Set the time difference and interval values\n        holder.tvTimeDifference.setText(timeDifferenceText);\n        holder.tvInterval.setText(formatTimeDifference(intervalValue));\n    }\n\n    @Override\n    public int getItemCount() {\n        return flashcards.size();\n    }\n}\n"
      },
      "FlashcardDAO": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\FlashcardDAO.kt",
        "content": "package com.example.flashcardapp.main\n\nimport android.content.Context\nimport android.util.Log\nimport com.example.flashcardapp.data.*\n\n// Coroutines imports:\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\n\nclass FlashcardDAO(context: Context) {\n\n    private val roomDao: FlashcardDao\n\n    init {\n        val db = FlashcardRoomDatabase.getDatabase(context.applicationContext)\n        roomDao = db.flashcardDao()\n    }\n\n    fun open() {\n        // changes: delete\n        // No operation. Room manages DB lifecycle.\n    }\n\n    fun close() {\n        // changes: delete\n        // No operation.\n    }\n\n    fun createFlashcard(flashcard: Flashcard): Flashcard {\n        val newId = roomDao.insertFlashcard(flashcard)\n        flashcard.id = newId.toInt()\n        return flashcard\n    }\n\n    fun getFlashcard(id: Int): Flashcard? {\n        return roomDao.getFlashcardById(id)\n    }\n\n    fun getNextDueFlashcard(currentTime: Long): Flashcard? {\n        return roomDao.getNextDueFlashcard(currentTime)\n    }\n\n    fun updateFlashcard(flashcard: Flashcard) {\n        roomDao.updateFlashcard(flashcard)\n    }\n\n    fun clearTopicsForFlashcard(flashcardId: Int) {\n        Log.d(\"FlashcardDAO\", \"clearTopicsForFlashcard not implemented in new Room DAO.\")\n    }\n\n    fun insertTopic(topicName: String): Topic {\n        val existing = roomDao.getTopicByName(topicName)\n        if (existing != null) {\n            return existing\n        }\n        val topic = Topic(name = topicName)\n        val newId = roomDao.insertTopic(topic)\n        topic.id = newId.toInt()\n        return topic\n    }\n\n    fun updateTopicSelection(topicId: Int, isSelected: Boolean) {\n        roomDao.updateTopicSelection(topicId, isSelected)\n    }\n\n    fun associateFlashcardWithTopic(flashcardId: Int, topicId: Int) {\n        roomDao.insertCrossRef(\n            FlashcardTopicCrossRef(flashcardId, topicId)\n        )\n    }\n\n    fun getTopicsForFlashcard(flashcardId: Int): List<Topic> {\n        Log.d(\"FlashcardDAO\", \"getTopicsForFlashcard not implemented with Room relations.\")\n        return emptyList()\n    }\n\n    fun getAllTopics(): List<Topic> {\n        return roomDao.getAllTopics()\n    }\n\n    fun getTopicByName(topicName: String): Topic? {\n        return roomDao.getTopicByName(topicName)\n    }\n\n    fun deleteFlashcard(flashcardId: Int) {\n        val flashcard = roomDao.getFlashcardById(flashcardId)\n        if (flashcard != null) {\n            roomDao.deleteFlashcard(flashcard)\n        }\n    }\n\n    fun getFutureFlashcards(): List<Flashcard> {\n        return roomDao.getFutureFlashcards(System.currentTimeMillis())\n    }\n\n    fun getPastFlashcards(): List<Flashcard> {\n        return roomDao.getPastFlashcards(System.currentTimeMillis())\n    }\n\n    fun getAllFlashcards(): List<Flashcard> {\n        return roomDao.getAllFlashcards()\n    }\n\n    fun getPastAndFutureQuestionsCount(): IntArray {\n        val currentTime = System.currentTimeMillis()\n        val pastCount = roomDao.getPastCount(currentTime)\n        val futureCount = roomDao.getFutureCount(currentTime)\n        return intArrayOf(pastCount, futureCount)\n    }\n\n    fun insertReviewHistory(\n        questionId: Int,\n        confidenceLevel: Int,\n        timestamp: Long,\n        timeSinceLastSeen: Long,\n        interval: Int,\n        reviewType: String,\n        answerDuration: Long\n    ) {\n        // Not implemented in the new Room DAO. You'd add an entity for review_history.\n        Log.d(\"FlashcardDAO\", \"insertReviewHistory not fully implemented.\")\n    }\n\n    // -----------------------------------------------------------------\n    // Below are the new coroutine-based async methods for DB operations\n    // -----------------------------------------------------------------\n\n    /**\n     * Launches a coroutine on Dispatchers.IO to fetch the next due flashcard.\n     * Result is returned on Dispatchers.Main.\n     */\n    fun getNextDueFlashcardAsync(currentTime: Long, onResult: (Flashcard?) -> Unit) { // changes: create\n        CoroutineScope(Dispatchers.IO).launch {\n            val result = getNextDueFlashcard(currentTime)\n            withContext(Dispatchers.Main) {\n                onResult(result)\n            }\n        }\n    }\n\n    /**\n     * Launches a coroutine on Dispatchers.IO to update a flashcard.\n     * Calls onComplete() on Dispatchers.Main when done.\n     */\n    fun updateFlashcardAsync(flashcard: Flashcard, onComplete: () -> Unit = {}) { // changes: create\n        CoroutineScope(Dispatchers.IO).launch {\n            updateFlashcard(flashcard)\n            withContext(Dispatchers.Main) {\n                onComplete()\n            }\n        }\n    }\n\n    /**\n     * Launches a coroutine on Dispatchers.IO to fetch the count of past and future questions.\n     * Result is returned on Dispatchers.Main.\n     */\n    fun getPastAndFutureQuestionsCountAsync(onResult: (IntArray) -> Unit) { // changes: create\n        CoroutineScope(Dispatchers.IO).launch {\n            val counts = getPastAndFutureQuestionsCount()\n            withContext(Dispatchers.Main) {\n                onResult(counts)\n            }\n        }\n    }\n}\n"
      },
      "FlashcardDatabaseHelper": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\FlashcardDatabaseHelper.java",
        "content": "// File: FlashcardDatabaseHelper.java\npackage com.example.flashcardapp.main;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\n\npublic class FlashcardDatabaseHelper extends SQLiteOpenHelper {\n    private static final String DATABASE_NAME = \"flashcards.db\";\n    private static final int DATABASE_VERSION = 12;  // Incremented for new tables\n\n\n    // Table and column names\n    public static final String TABLE_FLASHCARDS = \"flashcards\";\n    public static final String TABLE_TOPICS = \"topics\";\n    public static final String TABLE_FLASHCARD_TOPIC_CROSS_REF = \"flashcard_topic_cross_ref\";\n\n    // Flashcard columns\n    public static final String COLUMN_ID = \"id\";\n    public static final String COLUMN_QUESTION = \"question\";\n    public static final String COLUMN_ANSWER = \"answer\";\n    public static final String COLUMN_E_FACTOR = \"easinessFactor\";\n    public static final String COLUMN_REPETITION = \"repetition\";\n    public static final String COLUMN_INTERVAL = \"interval\";\n    public static final String COLUMN_NEXT_REVIEW = \"nextReview\";\n    public static final String COLUMN_SEARCH_TERM = \"searchTerm\";\n    public static final String COLUMN_USER_NOTE = \"userNote\";\n\n    // Topic columns\n    public static final String COLUMN_TOPIC_ID = \"id\";\n    public static final String COLUMN_TOPIC_NAME = \"name\";\n    public static final String COLUMN_TOPIC_SELECTED = \"selected\";\n\n    // CrossRef columns\n    public static final String COLUMN_FLASHCARD_ID = \"flashcard_id\";\n    public static final String COLUMN_TOPIC_ID_REF = \"topic_id\";\n\n    // SQL statement to create the flashcards table\n    private static final String TABLE_CREATE_FLASHCARDS =\n            \"CREATE TABLE \" + TABLE_FLASHCARDS + \" (\" +\n                    COLUMN_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    COLUMN_QUESTION + \" TEXT, \" +\n                    COLUMN_ANSWER + \" TEXT, \" +\n                    COLUMN_E_FACTOR + \" REAL, \" +\n                    COLUMN_REPETITION + \" INTEGER, \" +\n                    COLUMN_INTERVAL + \" INTEGER, \" +\n                    COLUMN_NEXT_REVIEW + \" INTEGER, \" +\n                    COLUMN_SEARCH_TERM + \" TEXT, \" +    // Add searchTerm column\n                    COLUMN_USER_NOTE + \" TEXT\" +        // Add userNote column\n                    \");\";\n\n    // SQL statement to create the topics table\n    private static final String TABLE_CREATE_TOPICS =\n            \"CREATE TABLE \" + TABLE_TOPICS + \" (\" +\n                    COLUMN_TOPIC_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n                    COLUMN_TOPIC_NAME + \" TEXT, \" +\n                    COLUMN_TOPIC_SELECTED + \" INTEGER DEFAULT 0\" + // Added the selected column\n                    \");\";\n\n\n    // SQL statement to create the flashcard_topic_cross_ref table\n    private static final String TABLE_CREATE_FLASHCARD_TOPIC_CROSS_REF =\n            \"CREATE TABLE \" + TABLE_FLASHCARD_TOPIC_CROSS_REF + \" (\" +\n                    COLUMN_FLASHCARD_ID + \" INTEGER, \" +\n                    COLUMN_TOPIC_ID_REF + \" INTEGER, \" +\n                    \"PRIMARY KEY(\" + COLUMN_FLASHCARD_ID + \", \" + COLUMN_TOPIC_ID_REF + \"), \" +\n                    \"FOREIGN KEY(\" + COLUMN_FLASHCARD_ID + \") REFERENCES \" + TABLE_FLASHCARDS + \"(\" + COLUMN_ID + \"), \" +\n                    \"FOREIGN KEY(\" + COLUMN_TOPIC_ID_REF + \") REFERENCES \" + TABLE_TOPICS + \"(\" + COLUMN_TOPIC_ID + \")\" +\n                    \");\";\n\n    private static final String CREATE_VIEW_FILTERED_FLASHCARDS =\n            \"CREATE VIEW IF NOT EXISTS view_filtered_flashcards AS \" +\n                    \"SELECT DISTINCT flashcards.* \" +\n                    \"FROM flashcards \" +\n                    \"JOIN flashcard_topic_cross_ref ON flashcards.id = flashcard_topic_cross_ref.flashcard_id \" +\n                    \"JOIN topics ON flashcard_topic_cross_ref.topic_Id = topics.id \" +\n                    \"WHERE topics.selected = 1;\";\n\n\n    // Review History Table Constants\n    public static final String TABLE_REVIEW_HISTORY = \"review_history\";\n    public static final String COLUMN_HISTORY_ID = \"id\";\n    public static final String COLUMN_HISTORY_QUESTION_ID = \"question_id\";\n    public static final String COLUMN_HISTORY_CONFIDENCE_LEVEL = \"confidence_level\";\n    public static final String COLUMN_HISTORY_TIMESTAMP = \"timestamp\";\n    public static final String COLUMN_HISTORY_TIME_SINCE_LAST_SEEN = \"time_since_last_seen\";\n    public static final String COLUMN_HISTORY_INTERVAL = \"interval\";\n    public static final String COLUMN_HISTORY_REVIEW_TYPE = \"review_type\";\n    public static final String COLUMN_HISTORY_ANSWER_DURATION = \"answer_duration\";\n\n\n    private static final String TABLE_CREATE_REVIEW_HISTORY = \"CREATE TABLE \" + TABLE_REVIEW_HISTORY + \" (\" +\n            COLUMN_HISTORY_ID + \" INTEGER PRIMARY KEY AUTOINCREMENT, \" +\n            COLUMN_HISTORY_QUESTION_ID + \" INTEGER, \" +\n            COLUMN_HISTORY_CONFIDENCE_LEVEL + \" INTEGER, \" +\n            COLUMN_HISTORY_TIMESTAMP + \" INTEGER, \" +\n            COLUMN_HISTORY_TIME_SINCE_LAST_SEEN + \" INTEGER, \" +\n            COLUMN_HISTORY_INTERVAL + \" INTEGER, \" +\n            COLUMN_HISTORY_REVIEW_TYPE + \" TEXT, \" + // Review type (e.g., \"normal\", \"quiz\")\n            COLUMN_HISTORY_ANSWER_DURATION + \" INTEGER, \" + // Answer duration in milliseconds\n            \"FOREIGN KEY(\" + COLUMN_HISTORY_QUESTION_ID + \") REFERENCES \" + TABLE_FLASHCARDS + \"(\" + COLUMN_ID + \") \" +\n            \"ON DELETE CASCADE);\";\n\n    public FlashcardDatabaseHelper(Context context) {\n        super(context, DATABASE_NAME, null, DATABASE_VERSION);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        db.execSQL(TABLE_CREATE_FLASHCARDS);\n        db.execSQL(TABLE_CREATE_TOPICS);\n        db.execSQL(TABLE_CREATE_FLASHCARD_TOPIC_CROSS_REF);\n        db.execSQL(CREATE_VIEW_FILTERED_FLASHCARDS);\n        db.execSQL(TABLE_CREATE_REVIEW_HISTORY);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        // Handle database upgrade\n        if (oldVersion < 2) {\n            db.execSQL(\"ALTER TABLE \" + TABLE_FLASHCARDS + \" ADD COLUMN \" + COLUMN_SEARCH_TERM + \" TEXT;\");\n            db.execSQL(\"ALTER TABLE \" + TABLE_FLASHCARDS + \" ADD COLUMN \" + COLUMN_USER_NOTE + \" TEXT;\");\n            db.execSQL(TABLE_CREATE_TOPICS);\n            db.execSQL(TABLE_CREATE_FLASHCARD_TOPIC_CROSS_REF);\n        }\n        if (oldVersion < 3){\n            db.execSQL(\"ALTER TABLE topics ADD COLUMN selected INTEGER DEFAULT 0\");\n        }\n\n        if (oldVersion < 11){\n            db.execSQL(TABLE_CREATE_REVIEW_HISTORY);\n        }\n\n        db.execSQL(\"DROP VIEW IF EXISTS view_filtered_flashcards;\");\n        db.execSQL(CREATE_VIEW_FILTERED_FLASHCARDS);\n\n\n    }\n\n\n\n\n\n}\n"
      },
      "GeneratedQuestionAdapter": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\GeneratedQuestionAdapter.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GeneratedQuestionAdapter extends RecyclerView.Adapter<GeneratedQuestionAdapter.QuestionViewHolder> {\n\n    private final List<Flashcard> questions;\n    private final List<Boolean> selected;\n\n    public GeneratedQuestionAdapter(List<Flashcard> questions) {\n        this.questions = questions;\n        this.selected = new ArrayList<>();\n        for (int i = 0; i < questions.size(); i++) {\n            selected.add(false); // Initially, no questions are selected\n        }\n    }\n\n    @NonNull\n    @Override\n    public QuestionViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_generated_question, parent, false);\n        return new QuestionViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull QuestionViewHolder holder, int position) {\n        Flashcard question = questions.get(position);\n\n        holder.etQuestion.setText(question.getQuestion());\n        holder.etAnswer.setText(question.getAnswer());\n        holder.cbSelect.setChecked(selected.get(position));\n\n        // Handle question text change\n        holder.etQuestion.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                question.setQuestion(s.toString());\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {}\n        });\n\n        // Handle answer text change\n        holder.etAnswer.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                question.setAnswer(s.toString());\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {}\n        });\n\n        // Handle selection state\n        holder.cbSelect.setOnCheckedChangeListener((buttonView, isChecked) -> selected.set(position, isChecked));\n    }\n\n    @Override\n    public int getItemCount() {\n        return questions.size();\n    }\n\n    public List<Flashcard> getSelectedQuestions() {\n        List<Flashcard> selectedQuestions = new ArrayList<>();\n        for (int i = 0; i < questions.size(); i++) {\n            if (selected.get(i)) {\n                selectedQuestions.add(questions.get(i));\n            }\n        }\n        return selectedQuestions;\n    }\n\n    static class QuestionViewHolder extends RecyclerView.ViewHolder {\n        EditText etQuestion, etAnswer;\n        CheckBox cbSelect;\n\n        public QuestionViewHolder(@NonNull View itemView) {\n            super(itemView);\n            etQuestion = itemView.findViewById(R.id.et_generated_question);\n            etAnswer = itemView.findViewById(R.id.et_generated_answer);\n            cbSelect = itemView.findViewById(R.id.cb_select_question);\n        }\n    }\n}\n"
      },
      "GenerateQuestionsActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\GenerateQuestionsActivity.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.os.Bundle;\nimport android.widget.Button;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.lifecycle.ViewModelProvider;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\nimport com.example.flashcardapp.viewmodel.ImportFlashcardsViewModel;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GenerateQuestionsActivity extends AppCompatActivity {\n\n    private Button btnGenerate, btnSave;\n    private RecyclerView rvGeneratedQuestions;\n    private ChatGPTQuestionAdapter adapter;\n    private ImportFlashcardsViewModel viewModel;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_generate_questions);\n\n        // Initialize UI components\n        btnGenerate = findViewById(R.id.btn_generate);\n        btnSave = findViewById(R.id.btn_save);\n        rvGeneratedQuestions = findViewById(R.id.rv_generated_questions);\n\n        // Initialize ViewModel\n        viewModel = new ViewModelProvider(this).get(ImportFlashcardsViewModel.class);\n\n        // Initialize DAO and pass it to ViewModel\n        FlashcardDAO flashcardDAO = new FlashcardDAO(this); // Use Activity context\n        flashcardDAO.open(); // Ensure the DAO is initialized\n        viewModel.initialize(flashcardDAO); // Pass the DAO to the ViewModel\n\n        // Setup RecyclerView\n        adapter = new ChatGPTQuestionAdapter(new ArrayList<>(), null); // Corrected line\n        rvGeneratedQuestions.setLayoutManager(new LinearLayoutManager(this));\n        rvGeneratedQuestions.setAdapter(adapter);\n\n        // Observe LiveData for changes\n        viewModel.getGeneratedQuestions().observe(this, generatedQuestions -> {\n            adapter.updateData(generatedQuestions); // Update adapter data\n        });\n\n        // Button listeners\n        btnGenerate.setOnClickListener(v -> generateQuestions());\n        btnSave.setOnClickListener(v -> saveQuestions());\n    }\n\n\n    private void generateQuestions() {\n        List<Flashcard> existingQuestions = viewModel.fetchExistingQuestions();\n        String promptGenerateQuestions = getString(R.string.prompt_generate_questions_activity); // Retrieve prompt from strings.xml\n\n        viewModel.generateQuestions(existingQuestions, promptGenerateQuestions, this,  new ImportFlashcardsViewModel.OnGenerateCallback() {\n            @Override\n            public void onSuccess() {\n                runOnUiThread(() -> {\n                    adapter.notifyDataSetChanged();\n                    Toast.makeText(GenerateQuestionsActivity.this, \"Questions generated successfully!\", Toast.LENGTH_SHORT).show();\n                });\n            }\n\n            @Override\n            public void onFailure(String error) {\n                runOnUiThread(() -> Toast.makeText(GenerateQuestionsActivity.this, \"Error: \" + error, Toast.LENGTH_SHORT).show());\n            }\n        });\n    }\n\n\n    private void saveQuestions() {\n        List<Flashcard> selectedQuestions = adapter.getSelectedQuestions();\n        viewModel.saveFlashcards(selectedQuestions);\n        Toast.makeText(this, \"Selected questions saved!\", Toast.LENGTH_SHORT).show();\n    }\n}\n"
      },
      "ImportFlashcardsActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\ImportFlashcardsActivity.java",
        "content": "package com.example.flashcardapp.main;\n\nimport android.content.ClipData;\nimport android.content.ClipboardManager;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.lifecycle.ViewModelProvider;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\nimport com.example.flashcardapp.util.FlashcardUtils;\nimport com.example.flashcardapp.viewmodel.ImportFlashcardsViewModel;\n\nimport java.util.List;\n\npublic class ImportFlashcardsActivity extends AppCompatActivity {\n\n    private EditText etJsonInput;\n    private Button btnImport, btnCopyText, btnClearText;\n    private ImportFlashcardsViewModel viewModel; // ViewModel reference\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_import_flashcards);\n\n        // Initialize views\n        etJsonInput = findViewById(R.id.et_xml_input);\n        btnImport = findViewById(R.id.btn_import);\n        btnCopyText = findViewById(R.id.btn_copy_text);\n        btnClearText = findViewById(R.id.btn_clear_text);\n\n        // Initialize ViewModel\n        viewModel = new ViewModelProvider(this).get(ImportFlashcardsViewModel.class);\n\n        // Retrieve prompts from XML resources\n        String promptGenerateQuestions = getString(R.string.prompt_generate_questions);\n        String promptExampleExistingQuestions = getString(R.string.prompt_example_existing_questions);\n\n        Log.d(\"Debug\", \"Prompt String: \" + promptExampleExistingQuestions);\n        // Replace &quot; with actual quotation marks\n        promptExampleExistingQuestions = promptExampleExistingQuestions.replace(\"&quot;\", \"\\\"\");\n\n        // Concatenate and set text to EditText\n        String prefilledText = promptGenerateQuestions + \"\\n\\n\" + promptExampleExistingQuestions;\n        etJsonInput.setText(prefilledText);\n\n        // Import button listener\n        btnImport.setOnClickListener(v -> {\n            String jsonInput = etJsonInput.getText().toString().trim();\n            if (!jsonInput.isEmpty()) {\n                try {\n                    // Parse flashcards using the utility method\n                    List<Flashcard> flashcards = FlashcardUtils.parseFlashcardsFromJson(jsonInput);\n\n                    // Save flashcards using ViewModel\n                    viewModel.saveFlashcards(flashcards);\n\n                    // Show success message\n                    String message = \"Imported \" + flashcards.size() + \" flashcards!\";\n                    Toast.makeText(this, message, Toast.LENGTH_SHORT).show();\n                } catch (Exception e) {\n                    // Handle JSON parsing errors\n                    Toast.makeText(this, \"Invalid JSON input. Please check the format.\", Toast.LENGTH_SHORT).show();\n                    Log.e(\"FlashcardImport\", \"Error parsing JSON input\", e);\n                }\n            } else {\n                // Handle empty input\n                Toast.makeText(this, \"Please enter JSON input.\", Toast.LENGTH_SHORT).show();\n            }\n        });\n\n        // Copy text button listener\n        btnCopyText.setOnClickListener(v -> {\n            String textToCopy = etJsonInput.getText().toString().trim();\n            if (!textToCopy.isEmpty()) {\n                ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);\n                ClipData clip = ClipData.newPlainText(\"Flashcard JSON\", textToCopy);\n                clipboard.setPrimaryClip(clip);\n                Toast.makeText(this, \"Text copied to clipboard!\", Toast.LENGTH_SHORT).show();\n            } else {\n                Toast.makeText(this, \"Nothing to copy!\", Toast.LENGTH_SHORT).show();\n            }\n        });\n\n        // Clear text button listener\n        btnClearText.setOnClickListener(v -> etJsonInput.setText(\"\"));\n    }\n\n\n}\n"
      },
      "ListFlashcardsActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\ListFlashcardsActivity.java",
        "content": "// File: ListFlashcardsActivity.java\npackage com.example.flashcardapp.main;\n\nimport android.os.Bundle;\nimport android.widget.ToggleButton;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Flashcard;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ListFlashcardsActivity extends AppCompatActivity {\n\n    private ToggleButton toggleReviewTime;\n    private FlashcardDAO flashcardDAO;\n    private List<Flashcard> flashcards;\n    private FlashcardAdapter flashcardAdapter; // Assuming you're using a RecyclerView adapter\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_list_flashcards);\n\n        // Initialize views\n        toggleReviewTime = findViewById(R.id.toggle_review_time);\n        flashcardDAO = new FlashcardDAO(this);\n        flashcardDAO.open();\n\n        // Set up the adapter and the RecyclerView\n        flashcards = new ArrayList<>();\n        flashcardAdapter = new FlashcardAdapter(this, flashcards); // Adjust the constructor as per your adapter\n        RecyclerView recyclerView = findViewById(R.id.recycler_view_flashcards);\n        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n        recyclerView.setAdapter(flashcardAdapter);\n\n        // Load initial data (future questions ascending)\n        loadFlashcards(true);\n\n        // Set toggle button listener to switch between past and future\n        toggleReviewTime.setOnCheckedChangeListener((buttonView, isChecked) -> {\n            if (isChecked) {\n                // Show past questions, descending order\n                loadFlashcards(false);\n            } else {\n                // Show future questions, ascending order\n                loadFlashcards(true);\n            }\n        });\n    }\n\n    private void loadFlashcards(boolean showFuture) {\n        // Clear the current list\n        flashcards.clear();\n\n        if (showFuture) {\n            // Load questions in the future, ordered ascending\n            flashcards.addAll(flashcardDAO.getFutureFlashcards());\n        } else {\n            // Load questions in the past, ordered descending\n            flashcards.addAll(flashcardDAO.getPastFlashcards());\n        }\n\n        // Notify the adapter that the data has changed\n        flashcardAdapter.notifyDataSetChanged();\n    }\n\n    @Override\n    protected void onDestroy() {\n        flashcardDAO.close();\n        super.onDestroy();\n    }\n}"
      },
      "MainActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\MainActivity.java",
        "content": "// File: MainActivity.java\npackage com.example.flashcardapp.main;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.widget.Button;\n\nimport com.example.flashcardapp.R;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Button btnAddFlashcard, btnReviewFlashcards, btnListFlashcards, btnImportExport, btnCreate;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n         btnAddFlashcard = findViewById(R.id.btn_action);\n         btnReviewFlashcards = findViewById(R.id.btn_review_flashcards);\n         btnListFlashcards = findViewById(R.id.btn_list_flashcards);\n         btnImportExport = findViewById(R.id.btn_import_export);\n         btnCreate = findViewById(R.id.btn_create);\n\n         btnAddFlashcard.setOnClickListener(v -> {\n            // FlashcardDAO flashcardDAO = new FlashcardDAO(this);\n            // flashcardDAO.open();\n            // flashcardDAO.deleteAllData();\n\n           //  Intent intent = new Intent(MainActivity.this, AddFlashcardActivity.class);\n             Intent intent = new Intent(MainActivity.this, TopicSelectionActivity.class);\n              startActivity(intent);\n         });\n\n\n\n\n         btnReviewFlashcards.setOnClickListener(v -> {\n             Intent intent = new Intent(MainActivity.this, ReviewFlashcardsActivity.class);\n             startActivity(intent);\n         });\n\n         btnListFlashcards.setOnClickListener(v -> {\n             Intent intent = new Intent(MainActivity.this, ListFlashcardsActivity.class);\n             startActivity(intent);\n         });\n\n         btnImportExport.setOnClickListener(v -> {\n             Intent intent = new Intent(MainActivity.this, ImportFlashcardsActivity.class);\n             startActivity(intent);\n         });\n\n        btnCreate.setOnClickListener(v -> {\n            Intent intent = new Intent(MainActivity.this, GenerateQuestionsActivity.class);\n            startActivity(intent);\n        });\n    }\n}\n"
      },
      "ReviewFlashcardsActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\ReviewFlashcardsActivity.kt",
        "content": "package com.example.flashcardapp.main\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.flashcardapp.R\nimport com.example.flashcardapp.data.Flashcard\nimport java.util.HashSet\n\nclass ReviewFlashcardsActivity : AppCompatActivity() {\n\n    private var totalQuestionsCount = 0\n    private var questionsMovedCount = 0\n    private var score = 0 // Current session score\n\n    private lateinit var tvTotalQuestions: TextView\n    private lateinit var tvQuestionsMoved: TextView\n    private lateinit var tvPast: TextView\n    private lateinit var tvFuture: TextView\n    private lateinit var tvQuestion: TextView\n    private lateinit var tvAnswer: TextView\n    private lateinit var btnShowAnswer: Button\n    private lateinit var btnForgot: Button\n    private lateinit var btnStruggling: Button\n    private lateinit var btnUnsure: Button\n    private lateinit var btnOkay: Button\n    private lateinit var btnGood: Button\n    private lateinit var btnPerfect: Button\n\n    private lateinit var flashcardDAO: FlashcardDAO\n    private var currentFlashcard: Flashcard? = null\n\n    private var answerStartTime: Long = 0\n\n    private val seenFlashcards = HashSet<Int>()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_review_flashcards)\n\n        // Initialize views\n        tvTotalQuestions = findViewById(R.id.tv_total_questions)\n        tvQuestionsMoved = findViewById(R.id.tv_questions_moved)\n        tvPast = findViewById(R.id.tv_past_questions)\n        tvFuture = findViewById(R.id.tv_future_questions)\n        tvQuestion = findViewById(R.id.tv_question)\n        tvAnswer = findViewById(R.id.tv_answer)\n        btnShowAnswer = findViewById(R.id.btn_show_answer)\n        btnForgot = findViewById(R.id.btn_forgot)\n        btnStruggling = findViewById(R.id.btn_struggling)\n        btnUnsure = findViewById(R.id.btn_unsure)\n        btnOkay = findViewById(R.id.btn_okay)\n        btnGood = findViewById(R.id.btn_good)\n        btnPerfect = findViewById(R.id.btn_perfect)\n\n        findViewById<View>(R.id.low_confidence_buttons).visibility = View.GONE\n        findViewById<View>(R.id.high_confidence_buttons).visibility = View.GONE\n\n        flashcardDAO = FlashcardDAO(this)\n        flashcardDAO.open()\n\n        // Start the review process (ASYNC now)\n        showNextFlashcard()\n\n        tvQuestion.setOnClickListener {\n            openEditQuestion()\n        }\n\n        btnShowAnswer.setOnClickListener {\n            if (currentFlashcard != null) {\n                tvAnswer.text = currentFlashcard!!.answer\n                tvAnswer.visibility = View.VISIBLE\n                btnShowAnswer.visibility = View.GONE\n\n                // Start timer for answer duration\n                answerStartTime = System.nanoTime()\n\n                // Show confidence buttons\n                findViewById<View>(R.id.low_confidence_buttons).visibility = View.VISIBLE\n                findViewById<View>(R.id.high_confidence_buttons).visibility = View.VISIBLE\n            }\n        }\n\n        // Confidence button listeners\n        btnForgot.setOnClickListener { handleConfidence(0) }\n        btnStruggling.setOnClickListener { handleConfidence(1) }\n        btnUnsure.setOnClickListener { handleConfidence(2) }\n        btnOkay.setOnClickListener { handleConfidence(3) }\n        btnGood.setOnClickListener { handleConfidence(4) }\n        btnPerfect.setOnClickListener { handleConfidence(5) }\n    }\n\n    // Fetches the next due flashcard on a background thread via Coroutines\n    private fun showNextFlashcard() {\n        flashcardDAO.getNextDueFlashcardAsync(System.currentTimeMillis()) { nextCard ->\n            if (nextCard != null) {\n                currentFlashcard = nextCard\n\n                tvQuestion.text = currentFlashcard!!.question\n                tvAnswer.visibility = View.GONE\n                findViewById<View>(R.id.low_confidence_buttons).visibility = View.GONE\n                findViewById<View>(R.id.high_confidence_buttons).visibility = View.GONE\n                btnShowAnswer.visibility = View.VISIBLE\n\n                seenFlashcards.add(currentFlashcard!!.id)\n                totalQuestionsCount++\n                updateCounters()\n            } else {\n                // No flashcards left\n                Toast.makeText(this@ReviewFlashcardsActivity, \"No flashcards due for review!\", Toast.LENGTH_SHORT).show()\n                finish()\n            }\n        }\n    }\n\n    private fun handleConfidence(quality: Int) {\n        val currentTime = System.currentTimeMillis()\n        val answerDuration = (System.nanoTime() - answerStartTime) / 1_000_000\n        currentFlashcard?.let {\n            val previousReviewTime = it.nextReview - it.interval\n\n            // DB logging, not fully implemented\n            flashcardDAO.insertReviewHistory(\n                it.id,\n                quality,\n                currentTime,\n                previousReviewTime,\n                it.interval,\n                \"normal\",\n                answerDuration\n            )\n\n            // Update the flashcard after review logic\n            updateFlashcardAfterReview(it, quality)\n        }\n    }\n\n    // Moved the actual update call into a coroutine-based method\n    private fun updateFlashcardAfterReview(flashcard: Flashcard, quality: Int) {\n        var interval = flashcard.interval\n        var repetition = flashcard.repetition\n        val currentTime = System.currentTimeMillis()\n        val lastReviewTime = flashcard.nextReview - interval * 1000L\n\n        when (quality) {\n            0 -> {\n                interval = 1\n                repetition = 0\n            }\n            1 -> {\n                interval = 10\n                repetition = 0\n            }\n            2 -> {\n                interval = 20\n                repetition = 0\n            }\n            3 -> {\n                interval = 30\n                repetition += 1\n            }\n            4 -> {\n                interval = 1600\n                repetition += 1\n            }\n            5 -> {\n                val timeLapsed = (currentTime - lastReviewTime) / 1000\n                interval = (timeLapsed * 2 + 3600).toInt()\n                repetition += 1\n            }\n            else -> {\n                interval = 30\n                repetition = 0\n            }\n        }\n\n        val nextReview = currentTime + interval * 1000L\n        flashcard.interval = interval\n        flashcard.nextReview = nextReview\n        flashcard.repetition = repetition\n\n        flashcardDAO.updateFlashcardAsync(flashcard) {\n            // Once updated, show a toast and move on\n            val timePushed = flashcard.nextReview - System.currentTimeMillis()\n            val timeDifference = TimeUtils.formatTimeDifference(timePushed)\n            Toast.makeText(this, \"Next: $timeDifference\", Toast.LENGTH_LONG).show()\n\n            if (timePushed > 24 * 60 * 60 * 1000L) {\n                questionsMovedCount++\n            }\n            score += quality\n\n            updateCounters()\n            showNextFlashcard()\n        }\n    }\n\n    private fun updateCounters() {\n        // Grab the counts asynchronously\n        flashcardDAO.getPastAndFutureQuestionsCountAsync { counts ->\n            tvTotalQuestions.text = seenFlashcards.size.toString()\n            tvQuestionsMoved.text = questionsMovedCount.toString()\n            tvPast.text = counts[0].toString()\n            tvFuture.text = counts[1].toString()\n        }\n    }\n\n    private val editFlashcardLauncher =\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\n            if (result.resultCode == RESULT_OK) {\n                currentFlashcard?.let {\n                    currentFlashcard = flashcardDAO.getFlashcard(it.id)\n                }\n            }\n        }\n\n    private fun openEditQuestion() {\n        currentFlashcard?.let {\n            val intent = Intent(this, EditFlashcardActivity::class.java)\n            intent.putExtra(\"FLASHCARD_ID\", it.id)\n            editFlashcardLauncher.launch(intent)\n        }\n    }\n\n    override fun onDestroy() {\n        flashcardDAO.close()\n        super.onDestroy()\n    }\n}\n"
      },
      "TimeUtils": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\TimeUtils.java",
        "content": "package com.example.flashcardapp.main;\n\npublic class TimeUtils {\n\n    // Method to convert milliseconds to dd-hh:mm:ss format\n    public static String formatTimeDifference(long timeInMillis) {\n        long seconds = timeInMillis / 1000;\n        long days = seconds / (24 * 3600);\n        seconds %= (24 * 3600);\n        long hours = seconds / 3600;\n        seconds %= 3600;\n        long minutes = seconds / 60;\n        seconds %= 60;\n\n        return String.format(\"%02d\\n%02d:%02d:%02d\", days, hours, minutes, seconds);\n    }\n}\n"
      },
      "TopicSelectionActivity": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\TopicSelectionActivity.java",
        "content": "// File: TopicSelectionActivity.java\npackage com.example.flashcardapp.main;\n\nimport android.os.Bundle;\nimport android.widget.Button;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Topic;\n\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport java.util.List;\n\npublic class TopicSelectionActivity extends AppCompatActivity {\n\n    private TopicSelectionAdapter adapter;\n    private FlashcardDAO flashcardDAO;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_topic_selection);\n\n        flashcardDAO = new FlashcardDAO(this);\n        flashcardDAO.open();\n\n        RecyclerView rvTopics = findViewById(R.id.rv_topics);\n        Button btnSave = findViewById(R.id.btn_save);\n\n        rvTopics.setLayoutManager(new LinearLayoutManager(this));\n\n        // Load all topics from the database\n        List<Topic> allTopics = flashcardDAO.getAllTopics();\n\n        // Initialize the adapter with the topics list\n        adapter = new TopicSelectionAdapter(allTopics);\n        rvTopics.setAdapter(adapter);\n\n        btnSave.setOnClickListener(v -> {\n            saveSelectedTopicsToDatabase(adapter.getSelectedTopics());\n            finish(); // Close activity after saving\n        });\n    }\n\n    private void saveSelectedTopicsToDatabase(List<Topic> topics) {\n        for (Topic topic : topics) {\n            flashcardDAO.updateTopicSelection(topic.getId(), topic.getSelected() );\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        flashcardDAO.close();\n        super.onDestroy();\n    }\n}\n"
      },
      "TopicSelectionAdapter": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\main\\TopicSelectionAdapter.java",
        "content": "// File: TopicSelectionAdapter.java\npackage com.example.flashcardapp.main;\n\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.CheckBox;\n\nimport com.example.flashcardapp.R;\nimport com.example.flashcardapp.data.Topic;\n\nimport androidx.annotation.NonNull;\nimport androidx.recyclerview.widget.RecyclerView;\nimport java.util.List;\n\npublic class TopicSelectionAdapter extends RecyclerView.Adapter<TopicSelectionAdapter.TopicViewHolder> {\n\n    private final List<Topic> topics;\n\n    public TopicSelectionAdapter(List<Topic> topics) {\n        this.topics = topics;\n    }\n\n    @NonNull\n    @Override\n    public TopicViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_topic_selection, parent, false);\n        return new TopicViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(@NonNull TopicViewHolder holder, int position) {\n        Topic topic = topics.get(position);\n        holder.cbTopic.setText(topic.getName());\n        holder.cbTopic.setChecked(topic.getSelected() );\n\n        // Update selection state on checkbox change\n        holder.cbTopic.setOnCheckedChangeListener((buttonView, isChecked) -> topic.setSelected(isChecked));\n    }\n\n    @Override\n    public int getItemCount() {\n        return topics.size();\n    }\n\n    public List<Topic> getSelectedTopics() {\n        return topics;\n    }\n\n    static class TopicViewHolder extends RecyclerView.ViewHolder {\n        CheckBox cbTopic;\n\n        public TopicViewHolder(@NonNull View itemView) {\n            super(itemView);\n            cbTopic = itemView.findViewById(R.id.cb_topic);\n        }\n    }\n}\n"
      }
    },
    "com.example.flashcardapp.util": {
      "FlashcardUtils": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\util\\FlashcardUtils.java",
        "content": "package com.example.flashcardapp.util;\n\nimport com.example.flashcardapp.data.Flashcard;\nimport com.example.flashcardapp.data.Topic;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FlashcardUtils {\n\n    public static List<Flashcard> parseFlashcardsFromJson(String jsonString) throws Exception {\n        List<Flashcard> flashcards = new ArrayList<>();\n\n        try {\n            JSONArray questionsArray = new JSONArray(jsonString);\n\n            int length = questionsArray.length();\n\n            for (int i = 0; i < questionsArray.length(); i++) {\n                JSONObject questionObj = questionsArray.getJSONObject(i);\n                Flashcard flashcard = new Flashcard(\n                        questionObj.getString(\"question\"),\n                        questionObj.getString(\"answer\")\n                );\n                flashcard.setSearchTerm(questionObj.optString(\"searchTerm\", \"\"));\n                flashcard.setUserNote(questionObj.optString(\"userNote\", \"\"));\n\n                // Parse topics\n                JSONArray topicsArray = questionObj.optJSONArray(\"topics\");\n                if (topicsArray != null) {\n                    List<Topic> topics = new ArrayList<>();\n                    for (int j = 0; j < topicsArray.length(); j++) {\n                        String topicName = topicsArray.getString(j);\n                        topics.add(new Topic(topicName)); // Create new Topic objects with names\n                    }\n                    //todo get this to work again\n                 //   flashcard.setTopics(topics);\n                }\n\n                flashcards.add(flashcard);\n            }\n        } catch (Exception e) {\n            throw new Exception(\"Failed to parse JSON string into Flashcards\", e);\n        }\n\n        return flashcards;\n    }\n}\n"
      }
    },
    "com.example.flashcardapp.viewmodel": {
      "ImportFlashcardsViewModel": {
        "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\java\\com\\example\\flashcardapp\\viewmodel\\ImportFlashcardsViewModel.java",
        "content": "package com.example.flashcardapp.viewmodel;\n\nimport androidx.lifecycle.LiveData;\nimport androidx.lifecycle.MutableLiveData;\nimport androidx.lifecycle.ViewModel;\n\nimport android.util.Log;\n\nimport com.example.flashcardapp.main.FlashcardDAO;\nimport com.example.flashcardapp.data.Flashcard;\nimport com.example.flashcardapp.data.Topic;\nimport com.example.flashcardapp.util.FlashcardUtils;\n\nimport org.json.JSONObject;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ImportFlashcardsViewModel extends ViewModel {\n\n    private final Map<String, Topic> topicCache = new HashMap<>();\n    private final MutableLiveData<List<Flashcard>> generatedQuestions = new MutableLiveData<>(new ArrayList<>());\n    private FlashcardDAO flashcardDAO;\n\n    // Initialize FlashcardDAO in ViewModel\n    public void initialize(FlashcardDAO dao) {\n        this.flashcardDAO = dao;\n        preloadTopicCache();\n    }\n\n    // Preload existing topics from the database into a cache\n    private void preloadTopicCache() {\n        List<Topic> existingTopics = flashcardDAO.getAllTopics();\n        for (Topic topic : existingTopics) {\n            topicCache.put(topic.getName(), topic); // Cache topics by name\n        }\n    }\n\n    // Getter for generated questions as LiveData\n    public LiveData<List<Flashcard>> getGeneratedQuestions() {\n        return generatedQuestions;\n    }\n\n    // Fetch existing flashcards from the database\n    public List<Flashcard> fetchExistingQuestions() {\n        return flashcardDAO.getAllFlashcards();\n    }\n\n    // Save flashcards into the database on a background thread\n    public void saveFlashcards(final List<Flashcard> flashcards) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for (Flashcard flashcard : flashcards) {\n                    if (flashcard.getQuestion() != null && flashcard.getAnswer() != null) {\n                        flashcardDAO.createFlashcard(flashcard); // Save flashcard in database\n\n                        // TODO: Handle topics association if needed\n                        /*\n                        for (Topic topic : flashcard.getTopics()) {\n                            Topic existingTopic = topicCache.get(topic.getName());\n                            if (existingTopic == null) {\n                                // Add new topic if it doesn't exist\n                                int topicId = flashcardDAO.insertTopic(topic.getName()).getId();\n                                topic.setId(topicId);\n                                topicCache.put(topic.getName(), topic);\n                            } else {\n                                topic.setId(existingTopic.getId());\n                            }\n                            flashcardDAO.associateFlashcardWithTopic(flashcard.getId(), topic.getId());\n                        }\n                        */\n                    }\n                }\n            }\n        }).start();\n    }\n\n    // Generate questions using ChatGPT based on existing questions and a given prompt\n    public void generateQuestions(List<Flashcard> existingQuestions, String prompt, final android.content.Context context, final OnGenerateCallback callback) {\n        StringBuilder promptBuilder = new StringBuilder(prompt + \"\\n\\nExisting questions:\");\n        for (Flashcard flashcard : existingQuestions) {\n            promptBuilder.append(\"\\nQ: \").append(flashcard.getQuestion());\n            promptBuilder.append(\"\\nA: \").append(flashcard.getAnswer());\n        }\n\n        com.example.flashcardapp.main.ChatGPTHelper.makeChatGPTRequest(promptBuilder.toString(), new com.example.flashcardapp.main.ChatGPTHelper.OnChatGPTResponse() {\n            @Override\n            public void onSuccess(String response) {\n                try {\n                    JSONObject rootObject = new JSONObject(response);\n                    String content = rootObject.getJSONArray(\"choices\")\n                            .getJSONObject(0)\n                            .getJSONObject(\"message\")\n                            .getString(\"content\");\n\n                    List<Flashcard> newQuestions = FlashcardUtils.parseFlashcardsFromJson(content);\n                    generatedQuestions.postValue(newQuestions);\n                    callback.onSuccess();\n                } catch (Exception e) {\n                    Log.e(\"GenerateQuestions\", \"Error parsing response\", e);\n                    callback.onFailure(\"Failed to parse response.\");\n                }\n            }\n\n            @Override\n            public void onFailure(String error) {\n                callback.onFailure(error);\n            }\n        }, context);\n    }\n\n    // Interface for handling callbacks during question generation\n    public interface OnGenerateCallback {\n        void onSuccess();\n        void onFailure(String error);\n    }\n\n    @Override\n    protected void onCleared() {\n        if (flashcardDAO != null) {\n            flashcardDAO.close();\n        }\n        super.onCleared();\n    }\n}\n"
      }
    }
  },
  "layout_files": {
    "activity_add_flashcard": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_add_flashcard.xml",
      "content": "<!-- File: activity_add_flashcard.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/et_question\"\n        android:hint=\"Question\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <EditText\n        android:id=\"@+id/et_answer\"\n        android:hint=\"Answer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n\n    <Button\n        android:id=\"@+id/btn_save\"\n        android:text=\"Save\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\" />\n</LinearLayout>\n"
    },
    "activity_chat_gpt": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_chat_gpt.xml",
      "content": "<!-- File: activity_chat_gpt.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <!-- RecyclerView for Questions -->\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/rv_questions\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\"\n        android:layout_marginTop=\"8dp\" />\n\n    <!-- Prompt Input Section -->\n    <EditText\n        android:id=\"@+id/et_prompt\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Enter topic for ChatGPT\" />\n\n    <!-- Topic EditText -->\n    <EditText\n        android:id=\"@+id/et_topic\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Topic\"\n        android:maxLines=\"1\"\n        android:layout_marginTop=\"16dp\" />\n\n    <!-- Informative Text EditText -->\n    <EditText\n        android:id=\"@+id/et_informative_text\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Informative Text\"\n        android:minHeight=\"100dp\"\n        android:maxLines=\"6\"\n        android:layout_marginTop=\"8dp\" />\n\n\n\n    <!-- Bottom Buttons -->\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:gravity=\"end\"\n        android:layout_marginTop=\"8dp\">\n\n        <!-- Back Button -->\n        <Button\n            android:id=\"@+id/btn_back\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Back\" />\n\n        <!-- Accept/Submit Button -->\n        <Button\n            android:id=\"@+id/btn_accept\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Submit\"\n            android:layout_marginStart=\"8dp\" />\n    </LinearLayout>\n</LinearLayout>\n"
    },
    "activity_edit_flashcard": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_edit_flashcard.xml",
      "content": "<!-- File: activity_edit_flashcard.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <EditText\n        android:id=\"@+id/et_question\"\n        android:hint=\"Question\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <EditText\n        android:id=\"@+id/et_answer\"\n        android:hint=\"Answer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n\n    <EditText\n        android:id=\"@+id/et_search_term\"\n        android:hint=\"Search Term\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n\n    <!-- User Note Section with Full Width EditText and Below Button -->\n    <EditText\n        android:id=\"@+id/et_user_note\"\n        android:hint=\"User Note\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\"\n        android:minHeight=\"100dp\"\n        android:maxLines=\"6\" />\n\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\">\n\n        <!-- Get Context Button -->\n        <Button\n            android:id=\"@+id/btn_context\"\n            android:layout_width=\"0dp\"\n            android:layout_weight=\"1\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Get Context\" />\n\n        <!-- Copy Button -->\n        <Button\n            android:id=\"@+id/btn_copy\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Copy\"\n            android:layout_weight=\"1\"\n            android:layout_marginStart=\"8dp\" />\n\n    </LinearLayout>\n\n    <EditText\n        android:id=\"@+id/et_topics\"\n        android:hint=\"Topics (comma-separated)\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n\n    <!-- Bottom Button Row -->\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\">\n\n        <Button\n            android:id=\"@+id/btn_update\"\n            android:text=\"Update\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\" />\n\n        <Button\n            android:id=\"@+id/btn_delete\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Delete\"\n            android:backgroundTint=\"@android:color/holo_red_dark\"\n            android:textColor=\"@android:color/white\"\n            android:layout_weight=\"1\"/>\n\n\n        <Button\n            android:id=\"@+id/btn_generate_related_question\"\n            android:text=\"Generate\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n             />\n    </LinearLayout>\n</LinearLayout>\n\n"
    },
    "activity_generate_questions": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_generate_questions.xml",
      "content": "<!-- res/layout/activity_generate_questions.xml -->\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <!-- Button to generate new questions -->\n    <Button\n        android:id=\"@+id/btn_generate\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Generate Questions\" />\n\n    <!-- RecyclerView to display generated questions -->\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/rv_generated_questions\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\"\n        android:scrollbars=\"vertical\" />\n\n    <!-- Button to save selected questions -->\n    <Button\n        android:id=\"@+id/btn_save\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Save Selected Questions\" />\n\n</LinearLayout>\n"
    },
    "activity_import_flashcards": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_import_flashcards.xml",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <!-- EditText for XML input -->\n    <EditText\n        android:id=\"@+id/et_xml_input\"\n        android:hint=\"Paste XML formatted Questions\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\"\n        android:gravity=\"top\"\n        android:inputType=\"textMultiLine\"\n        android:minHeight=\"200dp\"\n        android:maxLines=\"20\" />\n\n    <!-- LinearLayout for the buttons, with horizontal orientation -->\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"16dp\">\n\n        <!-- Button to copy the content of EditText -->\n        <Button\n            android:id=\"@+id/btn_copy_text\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Copy\" />\n\n        <!-- Button to clear the content of EditText -->\n        <Button\n            android:id=\"@+id/btn_clear_text\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Clear\" />\n\n        <!-- Button to import flashcards -->\n        <Button\n            android:id=\"@+id/btn_import\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"Import\" />\n\n    </LinearLayout>\n\n</LinearLayout>\n"
    },
    "activity_list_flashcards": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_list_flashcards.xml",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"8dp\">\n\n    <!-- Toggle button to switch between past/future flashcards -->\n    <ToggleButton\n        android:id=\"@+id/toggle_review_time\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:textOff=\"Show Future\"\n        android:textOn=\"Show Past\"\n        android:layout_gravity=\"center_horizontal\"\n        android:padding=\"8dp\" />\n\n    <!-- Headers for the columns -->\n    <LinearLayout\n        android:orientation=\"horizontal\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"8dp\"\n        android:background=\"?android:attr/windowBackground\">\n\n        <TextView\n            android:text=\"Question\"\n            android:layout_weight=\"1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:textStyle=\"bold\" />\n\n        <TextView\n            android:text=\"Answer\"\n            android:layout_weight=\"1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:textStyle=\"bold\" />\n\n        <TextView\n            android:text=\"Time Diff\"\n            android:layout_weight=\"1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:textStyle=\"bold\" />\n\n        <TextView\n            android:text=\"Interval\"\n            android:layout_weight=\"1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:textStyle=\"bold\" />\n    </LinearLayout>\n\n    <!-- RecyclerView for displaying flashcards -->\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/recycler_view_flashcards\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:padding=\"8dp\"\n        android:clipToPadding=\"false\" />\n\n</LinearLayout>\n"
    },
    "activity_main": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_main.xml",
      "content": "<!-- File: activity_main.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\"\n    android:gravity=\"center\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <Button\n        android:id=\"@+id/btn_action\"\n        android:text=\"Action\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n\n    <Button\n        android:id=\"@+id/btn_create\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Create\" />\n\n    <Button\n        android:id=\"@+id/btn_review_flashcards\"\n        android:text=\"Review Flashcards\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n\n    <Button\n        android:id=\"@+id/btn_list_flashcards\"\n        android:text=\"List Flashcards\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n\n    <Button\n        android:id=\"@+id/btn_import_export\"\n        android:text=\"Import/Export\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"8dp\" />\n</LinearLayout>\n"
    },
    "activity_review_flashcards": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_review_flashcards.xml",
      "content": "<com.google.android.material.card.MaterialCardView\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\"\n    >\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        tools:context=\".main.ReviewFlashcardsActivity\">\n\n\n            <LinearLayout\n                android:id=\"@+id/top_card_points\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"horizontal\"\n                android:padding=\"16dp\"\n                android:weightSum=\"4\">\n\n                <!-- Total Questions -->\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:gravity=\"center\">\n\n                    <ImageView\n                        android:layout_width=\"24dp\"\n                        android:layout_height=\"24dp\"\n                        android:src=\"@drawable/baseline_functions_24\" />\n\n                    <TextView\n                        android:id=\"@+id/tv_total_questions\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:paddingStart=\"8dp\"\n                        android:text=\"0\"\n                        android:textStyle=\"bold\"\n                        android:textAppearance=\"@style/TextAppearance.Material3.BodyMedium\" />\n                </LinearLayout>\n\n                <!-- Questions Moved -->\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:gravity=\"center\">\n\n                    <ImageView\n                        android:layout_width=\"24dp\"\n                        android:layout_height=\"24dp\"\n                        android:src=\"@drawable/baseline_double_arrow_24\" />\n\n                    <TextView\n                        android:id=\"@+id/tv_questions_moved\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:paddingStart=\"8dp\"\n                        android:text=\"0\"\n                        android:textStyle=\"bold\"\n                        android:textAppearance=\"@style/TextAppearance.Material3.BodyMedium\" />\n                </LinearLayout>\n\n                <!-- Past Questions -->\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:gravity=\"center\">\n\n                    <ImageView\n                        android:layout_width=\"24dp\"\n                        android:layout_height=\"24dp\"\n                        android:src=\"@drawable/baseline_arrow_back_ios_new_24\" />\n\n                    <TextView\n                        android:id=\"@+id/tv_past_questions\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:paddingStart=\"8dp\"\n                        android:text=\"0\"\n                        android:textStyle=\"bold\"\n                        android:textAppearance=\"@style/TextAppearance.Material3.BodyMedium\" />\n                </LinearLayout>\n\n                <!-- Future Questions -->\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:gravity=\"center\">\n\n                    <ImageView\n                        android:layout_width=\"24dp\"\n                        android:layout_height=\"24dp\"\n                        android:src=\"@drawable/baseline_arrow_forward_ios_24\" />\n\n                    <TextView\n                        android:id=\"@+id/tv_future_questions\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:paddingStart=\"8dp\"\n                        android:text=\"0\"\n                        android:textStyle=\"bold\"\n                        android:textAppearance=\"@style/TextAppearance.Material3.BodyMedium\" />\n                </LinearLayout>\n            </LinearLayout>\n\n        <com.google.android.material.card.MaterialCardView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginBottom=\"16dp\"\n\n            app:strokeWidth=\"1dp\"\n            app:strokeColor=\"?attr/colorOutline\"\n            app:cardElevation=\"4dp\"\n            app:layout_constraintTop_toBottomOf=\"@id/top_card_points\"\n\n            >\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:padding=\"16dp\">\n\n                <!-- Question Section -->\n                <TextView\n                    android:id=\"@+id/tv_question\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"16dp\"\n                    android:textSize=\"18sp\"\n                    android:textStyle=\"bold\"\n                    android:textAppearance=\"@style/TextAppearance.Material3.TitleMedium\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    tools:text=\"Sample Question Text\" />\n\n                <!-- Answer Section -->\n                <TextView\n                    android:id=\"@+id/tv_answer\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"This is where the answer is\"\n                    android:visibility=\"gone\"\n                    android:layout_marginTop=\"8dp\"\n                    android:textSize=\"16sp\"\n                    android:textAppearance=\"@style/TextAppearance.Material3.BodyLarge\"\n                    app:layout_constraintTop_toBottomOf=\"@id/tv_question\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintEnd_toEndOf=\"parent\" />\n\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n        </com.google.android.material.card.MaterialCardView>\n\n\n        <!-- Show Answer Button -->\n        <com.google.android.material.button.MaterialButton\n            android:id=\"@+id/btn_show_answer\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Show Answer\"\n            app:icon=\"@drawable/baseline_visibility_24\"\n            app:iconGravity=\"textStart\"\n            app:iconPadding=\"8dp\"\n            style=\"@style/Widget.Material3.Button.TonalButton\"\n            app:layout_constraintBottom_toTopOf=\"@id/low_confidence_buttons\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\" />\n\n        <!-- Confidence Buttons -->\n        <LinearLayout\n            android:id=\"@+id/low_confidence_buttons\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"horizontal\"\n            android:visibility=\"gone\"\n            app:layout_constraintBottom_toTopOf=\"@id/high_confidence_buttons\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\">\n\n            <com.google.android.material.button.MaterialButton\n                android:id=\"@+id/btn_forgot\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Forgot\"\n                style=\"@style/Widget.Material3.Button.OutlinedButton\" />\n\n            <com.google.android.material.button.MaterialButton\n                android:id=\"@+id/btn_struggling\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Struggling\"\n                style=\"@style/Widget.Material3.Button.OutlinedButton\" />\n\n            <com.google.android.material.button.MaterialButton\n                android:id=\"@+id/btn_unsure\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Unsure\"\n                style=\"@style/Widget.Material3.Button.OutlinedButton\" />\n        </LinearLayout>\n\n        <LinearLayout\n            android:id=\"@+id/high_confidence_buttons\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginTop=\"8dp\"\n            android:orientation=\"horizontal\"\n            android:visibility=\"gone\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\">\n\n            <com.google.android.material.button.MaterialButton\n                android:id=\"@+id/btn_okay\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Okay\"\n                style=\"@style/Widget.Material3.Button.OutlinedButton\" />\n\n            <com.google.android.material.button.MaterialButton\n                android:id=\"@+id/btn_good\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Good\"\n                style=\"@style/Widget.Material3.Button.OutlinedButton\" />\n\n            <com.google.android.material.button.MaterialButton\n                android:id=\"@+id/btn_perfect\"\n                android:layout_width=\"0dp\"\n                android:layout_weight=\"1\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"Perfect\"\n                style=\"@style/Widget.Material3.Button.OutlinedButton\" />\n        </LinearLayout>\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</com.google.android.material.card.MaterialCardView>\n"
    },
    "activity_topic_selection": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\activity_topic_selection.xml",
      "content": "<!-- File: res/layout/activity_topic_selection.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <!-- RecyclerView to display topics with checkboxes -->\n    <androidx.recyclerview.widget.RecyclerView\n        android:id=\"@+id/rv_topics\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"1\" />\n\n    <!-- Save button to confirm selection -->\n    <Button\n        android:id=\"@+id/btn_save\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Save Selection\" />\n</LinearLayout>\n"
    },
    "item_chatgpt_question": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\item_chatgpt_question.xml",
      "content": "<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <TextView\n        android:id=\"@+id/tv_question\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Question\"\n        android:textStyle=\"bold\" />\n\n    <TextView\n        android:id=\"@+id/tv_answer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Answer\" />\n\n    <TextView\n        android:id=\"@+id/tv_search_term\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Search Term\"\n        android:visibility=\"gone\" />\n\n    <TextView\n        android:id=\"@+id/tv_user_note\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"User Note\"\n        android:visibility=\"gone\" />\n\n    <CheckBox\n        android:id=\"@+id/cb_select_question\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Select this question\" />\n</LinearLayout>\n"
    },
    "item_flashcard": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\item_flashcard.xml",
      "content": "<!-- File: item_flashcard.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"horizontal\"\n    android:padding=\"8dp\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <TextView\n        android:id=\"@+id/tv_question\"\n        android:text=\"Question\"\n        android:layout_weight=\"1\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"4dp\" />\n\n    <TextView\n        android:id=\"@+id/tv_answer\"\n        android:text=\"Answer\"\n        android:layout_weight=\"1\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"4dp\" />\n\n    <TextView\n        android:id=\"@+id/tv_time_difference\"\n        android:text=\"Time Diff\"\n        android:layout_weight=\"1\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"4dp\" />\n\n    <TextView\n        android:id=\"@+id/tv_interval\"\n        android:text=\"Interval\"\n        android:layout_weight=\"1\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:padding=\"4dp\" />\n</LinearLayout>\n"
    },
    "item_generated_question": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\item_generated_question.xml",
      "content": "<!-- res/layout/item_generated_question.xml -->\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"vertical\"\n    android:padding=\"16dp\">\n\n    <EditText\n        android:id=\"@+id/et_generated_question\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Generated Question\"\n        android:inputType=\"textMultiLine\" />\n\n    <EditText\n        android:id=\"@+id/et_generated_answer\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"Generated Answer\"\n        android:inputType=\"textMultiLine\" />\n\n    <CheckBox\n        android:id=\"@+id/cb_select_question\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Select this question\" />\n\n</LinearLayout>\n"
    },
    "item_topic_selection": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\layout\\item_topic_selection.xml",
      "content": "<!-- File: res/layout/item_topic_selection.xml -->\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:orientation=\"horizontal\"\n    android:padding=\"8dp\">\n\n    <CheckBox\n        android:id=\"@+id/cb_topic\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_weight=\"1\"\n        android:text=\"Topic Name\" />\n\n</LinearLayout>\n"
    }
  },
  "values_files": {
    "arrays": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\values\\arrays.xml",
      "content": "<resources>\n    <string-array name=\"quality_ratings\">\n        <item>5 - Perfect response</item>\n        <item>4 - Correct response after hesitation</item>\n        <item>3 - Correct response with difficulty</item>\n        <item>2 - Incorrect response but remembered</item>\n        <item>1 - Incorrect but seemed easy to recall</item>\n        <item>0 - Complete blackout</item>\n    </string-array>\n</resources>\n"
    },
    "strings": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\values\\strings.xml",
      "content": "<resources>\n    <!-- App Name -->\n\t<string name=\"action_settings\">Settings</string>\n    <string name=\"app_name\">FlashcardApp</string>\n<string name=\"first_fragment_label\">Flashcard List</string>\n<string name=\"second_fragment_label\">Review Flashcards</string>\n\n    <!-- Main Activity Labels -->\n    <string name=\"add_flashcard\">Add Flashcard</string>\n    <string name=\"review_flashcards\">Review Flashcards</string>\n    <string name=\"list_all_flashcards\">List Flashcards</string>\n    <string name=\"import_export_flashcards\">Import/Export Flashcards</string>\n\n    <!-- Add/Edit Flashcard Screen -->\n    <string name=\"question_label\">Question:</string>\n    <string name=\"answer_label\">Answer:</string>\n    <string name=\"save_flashcard\">Save Flashcard</string>\n    <string name=\"update_flashcard\">Update Flashcard</string>\n    <string name=\"delete_flashcard\">Delete Flashcard</string>\n    <string name=\"back\">Back</string>\n    <string name=\"flashcard_saved\">Flashcard saved!</string>\n    <string name=\"flashcard_updated\">Flashcard updated!</string>\n    <string name=\"flashcard_deleted\">Flashcard deleted!</string>\n    <string name=\"enter_question_answer\">Please enter both question and answer.</string>\n\n    <!-- Review Flashcard Screen -->\n    <string name=\"review_flashcard\">Review Flashcard</string>\n    <string name=\"show_answer\">Show Answer</string>\n    <string name=\"rate_recall_quality\">Rate your recall quality (0-5):</string>\n    <string name=\"no_flashcards_due\">No flashcards due for review.</string>\n    <string name=\"review_complete\">Review session completed!</string>\n\n    <!-- Import/Export Flashcards -->\n    <string name=\"import_flashcards\">Import Flashcards</string>\n    <string name=\"export_flashcards\">Export Flashcards</string>\n    <string name=\"import_successful\">Flashcards imported successfully!</string>\n    <string name=\"export_successful\">Flashcards exported successfully!</string>\n    <string name=\"file_not_found\">The specified file does not exist.</string>\n\n    <!-- Miscellaneous Labels -->\n    <string name=\"flashcard_id\">Flashcard ID:</string>\n    <string name=\"easiness_factor\">Easiness Factor:</string>\n    <string name=\"repetition\">Repetition:</string>\n    <string name=\"interval\">Interval:</string>\n    <string name=\"next_review\">Next Review:</string>\n    <string name=\"input_error\">Input error: Please check your inputs.</string>\n</resources>\n"
    },
    "strings_prompts": {
      "file_path": "C:\\Users\\Linse\\Documents\\Programmieren\\flashcardapp\\app\\src\\main\\res\\values\\strings_prompts.xml",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <string name=\"prompt_generate_questions\">\n        Provide a concise answer emphasizing the year, the event, and its connections to broader historical developments or trends.\n    </string>\n    <string name=\"prompt_example_existing_questions\">\n        Provide the response as a valid JSON array. Each object should have:\n        [\n        {\n            \\\"question\\\": \\\"When was the Battle of Hastings and what was its significance in shaping the political landscape of England and Europe?\\\",\n            \\\"answer\\\": \\\"1066 marked the Norman conquest of England, linking England to continental Europe, influencing feudalism, and shaping the future of monarchy and law.\\\",\n            \\\"searchTerm\\\": \\\"Battle of Hastings significance\\\",\n            \\\"userNote\\\": \\\"Key event that reshaped English and European political dynamics.\\\",\n            \\\"topics\\\": [\\\"History\\\", \\\"England\\\", \\\"Middle Ages\\\"]\n        },\n        {\n            \\\"question\\\": \\\"When was the Magna Carta signed and how did it influence the relationship between monarchy and governance?\\\",\n            \\\"answer\\\": \\\"1215 marked the signing of the Magna Carta, limiting royal authority, inspiring constitutional developments, and reinforcing ideas of accountability.\\\",\n            \\\"searchTerm\\\": \\\"Magna Carta constitutional law\\\",\n            \\\"userNote\\\": \\\"Important for understanding the development of constitutional principles.\\\",\n            \\\"topics\\\": [\\\"History\\\", \\\"England\\\", \\\"Middle Ages\\\"]\n        },\n        {\n            \\\"question\\\": \\\"When did the fall of Constantinople occur and why is it regarded as a pivotal event in medieval history?\\\",\n            \\\"answer\\\": \\\"1453 marked the fall of Constantinople to the Ottomans, connecting the end of the Byzantine Empire to the rise of Ottoman dominance and the beginning of early modern trade shifts.\\\",\n            \\\"searchTerm\\\": \\\"Fall of Constantinople significance\\\",\n            \\\"userNote\\\": \\\"Critical for understanding the transition from medieval to early modern history.\\\",\n            \\\"topics\\\": [\\\"History\\\", \\\"Ottoman Empire\\\", \\\"Byzantine Empire\\\", \\\"Middle Ages\\\"]\n        }\n        ]\n    </string>\n    <string name=\"prompt_generate_questions_activity\">\n    Based on the following questions and answers, generate six new related questions with new events that connect to one of the already existing questions. Ideally, the new questions should connect two of the already existing questions. Make all events historically important and relevant to the overall pool of questions. It is important: Please make sure, that no dates mentioned in the question. Also do not hint too clearly at the answer. The answer should include a date where possible. The question should be one sentence and the answer around two sentences.\n\n    Provide the response as a valid JSON array with the following structure:\n\n    [\n        {\n            \\\"question\\\": \\\"&lt;new question&gt;\\\",\n            \\\"answer\\\": \\\"&lt;answer&gt;\\\",\n            \\\"searchTerm\\\": \\\"&lt;term&gt;\\\",\n            \\\"userNote\\\": \\\"&lt;note&gt;\\\",\n            \\\"topics\\\": [\\\"&lt;topic&gt;\\\"]\n        }\n    ]\n</string>\n\n\n</resources>\n"
    }
  }
}